{"meta":{"title":"道·术","subtitle":"以道统术，以术得道","description":"","author":"Oliver","url":"https://github.com/BakerHancockChen/BakerHancockChen.github.io","root":"/"},"pages":[{"title":"about","date":"2019-10-15T16:20:07.000Z","updated":"2019-10-15T16:20:31.402Z","comments":true,"path":"about/index.html","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-15T16:18:08.000Z","updated":"2019-10-15T16:18:53.691Z","comments":true,"path":"categories/index.html","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2019-10-16T02:54:45.000Z","updated":"2019-10-16T02:54:45.148Z","comments":true,"path":"contact/index.html","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/contact/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-10-15T16:19:19.000Z","updated":"2019-10-15T16:19:43.038Z","comments":true,"path":"tags/index.html","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"PRD-版本控制","slug":"PRD-版本控制","date":"2019-09-23T04:20:29.000Z","updated":"2020-03-16T04:16:02.141Z","comments":true,"path":"2019/09/23/prd-ban-ben-kong-zhi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/09/23/prd-ban-ben-kong-zhi/","excerpt":"","text":"无论是瀑布流，还是sprint形式推进，文档总是逐渐完善的。版本的控制，尤为重要。 文件命名法每个产品都是持续迭代的，而每个迭代覆盖的功能（新增 or 更新，甚至有删除）改动是不一样的。文档的编号和命名就很关键，可以区分该文档属于产品的哪个迭代，修改了几个版本。 顾名思义就是通过文件名，来区分各个版本。简单的方法是，XX产品V1.0PRD_V2，其中V1.0是产品迭代的编号，后面的V2是PRD的版本号。稍微详细点可以定义成，XX产品XXXX需求PRD_V2,即对本次迭代的需求任务做命名，这样更便于阅读和记忆。 文件命名法是不可或缺的，但应用不深。究其原因，是内部研发更关注： 文档是最新的，也就是PM所想即PRD所写 能快速定位修改点，例如增加了一个查询条件这种 文件命名法的版本号，在这方面帮助不大。所以只用于区分迭代，例如XX产品V2.0PRD.docx。 更新标识前面讲的，研发过程更希望能快速定位修改点。所以，PRD要有更新标记，提高查找效率。更新标识一般是总分形式，改动说明概括本次修改点，然后查看具体的修改点 改动说明这个近似于更新记录，基本上所有PRD模板中都有，大体类似这种样式： 日期 版本 修订说明 修订人 备注 2019-09-23 0.1 初始创建 Oliver 2019-09-24 0.2 优先级变更，增加X功能 Oliver 从第二迭代移至第一迭代 但实际应用中，能认真写的人太少了。普遍结果为导向，就是项目/迭代准时交付。即便人员流动很大，只要系统不出问题，文档是没人去看的。 修订模式这个是word自带的功能，以office2013为例简单介绍下。 首先，开启修订模式的路径，是菜单栏“审阅-修订-修订”： 开启完后，文档的相关修改，都会留下痕迹。每次更改之前，可以接收所有修订。这样就能让修订模式，记录下此版本的修改项。也可以一直修订，但是会导致文档很大。另外使用时候很卡，而且不容易定位修改点。 研发、测试拿到最新文档，可打开审阅窗格，路径为“审阅-审阅窗格-垂直审阅窗格”。打开后，可以看到具体的修订（双击可定位到对应位置）： 约定标记这个是非常规做法，主要用于临时性的修改。根据墨菲定律，还是准备下。 主要有以下形式： 字体颜色的标记，如红色是修改项 字体的背景色，如黄色高亮是修改项 批注，相对于颜色改动，更有持续性。 颜色最为直观，推荐临时改动使用颜色： 至于批注，更适合下面疑问的标记 疑问标记需求评审，基本是PM先介绍项目背景，概述修改点，研发初估可行性和工作量。然后研发查看PRD，再询问PM具体的疑问，效率会比较低。目前了解到，有以下两种形式 批注虽然原始但非常有效的方法，用于标记对文档的疑问、意见，形成一问一答的效果，并留有痕迹： 系统辅助Jira/Teambition/TAPD/禅道，都是比较知名的管理工具。以TAPD为例子，有各种的玩法： 作为项目管理工具使用，需求管理基本不用，还美其名曰敏捷。项目根据一期二期，拆分多个迭代。一个迭代一个需求，文档附在需求中。task用于开发测试的工时，缺陷主要管控Bug（需求问题较少），整体监控项目进度。 披着敏捷外衣的传统式项目。项目拆解多个迭代，迭代拆解多个需求。需求拆解story（细分功能，如列表查询、增删改、导入导出。story拆解开发task,如新增编辑、删除，测试工时也用task登记。用例线下Excel处理，缺陷用于管控需求缺陷和Bug。最终关注项目里程碑和交付，看板基本不使用 真正的敏捷，不描述了。看板，story、用例、燃尽图统统上，联合 DevOps和jenkins ，实现自动集成，快速部署。","categories":[{"name":"需求分析","slug":"需求分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/需求分析/"}],"tags":[{"name":"PRD","slug":"PRD","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/PRD/"}]},{"title":"产品&项目工作流程总结","slug":"工作流程","date":"2019-05-13T14:20:29.000Z","updated":"2019-10-20T14:44:37.913Z","comments":true,"path":"2019/05/13/gong-zuo-liu-cheng/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/05/13/gong-zuo-liu-cheng/","excerpt":"","text":"快消云CRM，头部企业针对中大型客户，主流模式是PaaS为基座建设SaaS应用。所以会穿插在产品和项目之间，一边迭代产品，一边支撑项目。 当初看着互联网相关产品书籍，感觉B端差异好大。现在回顾，只要是真正做产品，B和C的大流程真没什么差异。 整体蓝图 产品流程产品研发流程大体分为： 立项阶段、设计阶段、开发阶段、测试阶段、上线阶段、运营阶段。： 立项阶段，主要分为需求搜集和PMO（或产品委员会）立项。需求搜集阶段可以很长，包括如下内容： 如果是从0到1或者彻底重构的产品，要先进行BRD的输出。包括整体行业的分析，到竞争对手分析，再到roadmap和对应资源匹配。用BRD进行宣讲，才能向上申请资源进行立项。 然后，可能是MRD的输出或者拆解执行。MRD在很多公司会以年度规划的形式提前进行输出，主要是产品roadmap和进度计划。到了某个立项阶段，会根据市场、战略、竞品、技术、渠道等情况，调整版本实现的功能模块以及优先级。当然，还有最重要的项目里程碑计划。 最终输出物基本是立项报告，然后邀请PMO或产品委员会进行立项评审。 设计阶段，主要分为需求池和PRD两大块： 基于立项阶段的MRD、上版本遗留问题和运营反馈的问题，列出概要清单。 然后召集项目成员，进行概要评审。这个评审一般是可行性、优先级以及成本的评审。评审通过的功能，细化成功能清单。 也存在研发业务背景较弱，概要已经要很细，功能清单要更细，以评估合适的工作量。上述的一个概要，需要拆成： 列表显示（实体的相关信息、列表需要显示的字段、数据规模以及分页） 查询（哪几个条件，条件对应的类型） 高级查询（哪几个条件，条件对应的类型） 新增（表单录入字段，校验规则） 编辑（只读信息、可编辑信息、校验规则） 启用（规则） 停用（规则） 删除（规则） PRD阶段，主要输出物是原型和需求规格说明书。在部分小版本中，甚至不输出需求规格说明书，业务流程、页面流程、交互说明和异常处理都会在原型上体现。 B端比较重视文档，在部分敏捷开发的C端，原型也是以逐个拆解的线框图为主。 这个样有以下好处： 一目了然，开发、UI设计不容易遗漏页面 UI设计、研发实现工作量评估更加到位 UI设计师可以设计更好的UE效果，有更大的发挥空间 节省产品经理自己的时间，高保真原型性价比太低 绘制原型之前要进行整体的业务建模，力求梳理清楚全部的业务流程和必要信息。在绘制草图时，要多和UI设计师交流，找到更合适的呈现形式。在原型评审的时候，先介绍这些流程，再看具体的原型页面。原型评审结束，前端研发可以开始部分页面的UI开发，UI设计师准备视觉界面的输出。 需求规格说明书，需要拆分各业务领域进行输出。一个产品一个需求规格说明书，整个文档会非常的大。加上大量的修订和批注，产品人员维护起来很痛苦。编写需求规格说明书期间，要保持和架构师（开发经理）的沟通，在文档中完善业务逻辑。为了保障文档质量，目前文档是基于用例的形式编写的： 这样能更好的和测试进行沟通，减轻测试用例输出的工作，更专注于自动化测试。 需求规格输出完成，需要进行需求评审。由于内部项目动辄3个月，这个会议至少需要1-2小时。拿着几十上百页的文档过，开始还好，半小时后大家就注意力涣散了。 目前使用PPT进行需求评审，只关注业务流程和关键因素，反馈效果很好： 具体文档可以回去后进行查看，配合项目管理工具登记具体的问题，产品人员进行修复。 开发计划阶段，主要是进行项目的计划排期。内部有开发经理角色，可以将这个任务交给开发经理 概要设计，不是第一个大版本，基本是业务时序图、数据结构的设计。由研发输出，测试、产品进行评审 编码实现阶段是事情最为繁杂的，包括但不限于： 原型、交互形式的改动 用户需求规格的补充 追踪推进进度，进行阶段性的测试验收。如客户管理的列表查询和新增编辑功能今天都能完成，要早上找到对应研发人员询问进度情况。进度理想的情况下，下午让研发先自测，然后去进行检查。进度不理想要找出差距，寻找追赶的办法。 测试验证阶段，主要有以下两个工作： 把握测试环境的部署和更新节奏 守好需求验证的关卡。根据主业务流程，编写需求验证清单，对产品进行需求测试。如果连主业务流程都跑不通，没必要让测试人员进行测试。 修复前期遗漏的业务逻辑。不排除经过原型评审、需求评审、编码实现，还有部分逻辑不在需求规格说明中。例如某个异常情况，需求规格没写处理逻辑，研发按照自己的想法做了。还是需要产品确认，并在需求规格中补充的。 发布运营 发布运营阶段很重要，工作也比较零散： 演示环境的搭建，准备数据的初始化 针对营销线的方案宣讲，输出解决方案和功能模块清单 针对实施、客服的系统实操培训，输出用户操作说明书 APP上架文案和相关事项追踪 EDM的设计 APP更新机制策略的评估，是灰度发布、提示更新还是强制更新 用户的反馈进入需求池，为后续迭代做准备 支撑验证客户项目，包括方案讲解、需求调研等 项目流程B端客户一般有定制化诉求，会以项目交付的形式进行落地。并且公司内部要求每个版本有验证客户，完善产品到实施的知识转移。工作流程如下： 整个大流程里面，产品经理可能会在涉及以下工作： 在意向阶段介入，协助售前一起完善解决方案（一般是大客户）。 在投标阶段初期切入，替代售前进行解决方案的讲解，以及产品的演示（行业龙头客户）。 在投标阶段后期切入，负责客户POC功能的调研和规划落地。需要协调各方资源，在实施开发环境进行功能改造，并追踪整体进度（此时未立项，替代项目经理）。 在项目立项阶段切入，作为公司的产品部代表出席立项会，维护客情。 在蓝图规划阶段切入，支撑需求调研工作。如出差客户现场，主导调研并输出部分PRD。提供最新产品原型、PRD和组件库，赋能实施人员。最后，还可能参与蓝图方案的输出。 在系统建设阶段切入，可标准化的功能将由产品部实现。此时需要分配任务跟踪进度，确保标准功能分批实现，满足客户诉求和各项目上线节点。同时关注客户测试环境，确认稳定可靠。 在上线推广阶段切入，主要是客情维护和系统培训。另外，也需要输出产品的用户说明书，为一线实施人员提供弹药。此阶段已上线客户生产环境，需要安排服务经理跟进，并做好出现紧急情况的预案。","categories":[{"name":"通用知识","slug":"通用知识","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/通用知识/"}],"tags":[{"name":"研发流程","slug":"研发流程","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/研发流程/"},{"name":"项目管理","slug":"项目管理","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/项目管理/"}]},{"title":"业务建模和UML","slug":"业务建模","date":"2019-05-01T05:20:28.000Z","updated":"2020-03-16T04:14:19.384Z","comments":true,"path":"2019/05/01/ye-wu-jian-mo/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/05/01/ye-wu-jian-mo/","excerpt":"","text":"《软件方法(上)–业务建模和需求》的相关总结 在线试读： http://www.umlchina.com/book/panjiayu.htm 业务建模–竞争优势 业务建模–建模工作流与UML 业务建模–愿景 业务建模–业务用例图 业务建模–业务序列图","categories":[{"name":"需求分析","slug":"需求分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/需求分析/"}],"tags":[{"name":"业务建模","slug":"业务建模","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/业务建模/"}]},{"title":"业务建模--愿景","slug":"业务建模-愿景","date":"2019-04-29T13:20:28.000Z","updated":"2019-10-30T03:19:10.487Z","comments":true,"path":"2019/04/29/ye-wu-jian-mo-yuan-jing/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/04/29/ye-wu-jian-mo-yuan-jing/","excerpt":"","text":"本文为《软件方法-业务建模和需求》的读后感系列，可在线试读 愿景定义 没有愿景的支持，互联网时代流行的口号“我们只做最重要的需求”、“砍掉80%的功能，专注于剩下的20%”将沦为空话，怎么判断哪条需求最重要？砍掉哪80%？愿景就是需求排序的主要依据。 一个系统的愿景就是：这个系统为用户提供了什么好处，让用户愿意为此买单 作者提供了一种“爆炸法”，辅助我们更好的找到愿景： 爆炸法： 如果投资人在你身上绑了炸弹，命令你几分钟时间内把当前研究的系统推销出去，而且只能找一个人推销。假设这个炸弹还能感应脑电波，推销完毕后,如果炸弹感应到被推销的人对这个系统不感兴趣，炸弹就会爆炸。这种情况下，你会选择向谁推销，推销时选择说什么话，保住自己性命的可能性最大？这个问题的答案就是老大和愿景。 （很多人可能会第一时间想到向自己的父亲或母亲推销，但是，父母会买单是对你的性命感兴趣，未必对你推销的系统感兴趣，炸弹依然会爆炸！） 如果上面的场景还不足以刺激你思考，可以用加强版：如果投资人在你和你的情敌身上绑了炸弹，命令你们几分钟时间内把当前研究的系统推销出去，谁得到的感兴趣的脑电波强，谁就活下来。 目标组织和老大 目标组织：待开发系统将改进其流程的组织。它可以是一个机构，也可以是一个人群。 老大：目标组织的代表 在B端，目标组织更多时候被称呼为“客户”。而老大，是系统最优先照顾其利益的那个人（一般是业务部门leader）。一般有以下几种情况： 编号 情况 系统改进范围 定位老大的步骤 1 针对特定人的定制系统 某个特定人 这个人就是老大，无须特殊工作 2 针对人群的非定制系统 某个人群 定位目标人群 ，定位老大 3 针对某特定机构的定制系统 某特定机构 定位机构范围，定位老大 4 针对某类机构的非定制系统 某类机构 定位机构范围 ，定位目标机构，定位老大 定位目标人群和老大第二种情况，系统改进的目标组织是改善个人工作，但不清楚是具体的人，还是某类人群，甚至所有人。 常见错误： 从功能加上“人群”二字得到目标人群 吃窝边草，就近找老大 虚构老大 正确思考方法是不断追问，层层细化，直到满意为止。以某虚构的K12教育网站为例，细化其目标客户： 目标客户到底是谁？肯定是中学生，中学生学业压力大，更需要学习方法的提升。小学生大政策上都要减负，家长喜欢素质教育。再小一点，都没学习的压力。 中学生包括初中生、高中生，到底哪个更符合？都可以的。 不能都可以，总要找个更合适的，哪个更合适？初中生吧。 为什么是初中生？初中生往往没掌握系统的学习方法，需要我们网站的帮助。 哪个年级的初中生更合适？当然是初一的学生。他们刚从小学保姆式的教育中脱离，学习方法没有那么系统。课程压力又忽然增大，这时候对学习方法提升很迫切。 哪里的初中生合适？一二线城市的初中生比较合适。一方面用户更习惯互联网，用户教育成本低。另一方面，一二线城市教育竞争激烈，家长学生的需求比较旺盛。最后，网络基础设施好，效果更好。 作者提供了更严格的方法，使用类图： 对类的每个属性以及所关联的每个属性展开比较，找出最“像”的属性值集合 这个方法，其实很像现在互联网中的用户画像。但是很多产品的用户画像是后续运营得到的，前期必须通过用户研究得到，不能虚构得到persona。 定位机构范围和老大第三种情况，系统改进的目标组织是某个机构。定位目标结构范围和老大的时候，思维还是逐步逼近的。 定位机构范围首先要解决的是，如何恰当的确定所研究机构的范围。这个可能要尝试多次，范围大了小了都很正常。 一般有两个方法： 根据系统名字推测范围大小 画一个圈，把大多数能被替换责任的系统圈在里面： 定位机构的范围，其实和老大的职权范围有关，老大是营销总监，把整个公司作为研究对象就太大了。 定位老大定位老大有以下常见的错误： 目标机构的IT主管是老大，这个是常见的错误。一般做项目，甲方项目经理是IT部门的人员，所以可能发言较多。绝大多数情况下，系统的愿景的解决业务部门的问题，适配业务部门的流程。 机构之上的大领导是老大。这个范围扩大了，具体落地的时候需求会不够具体。 谁出现谁就是老大，这个也比较常见。通常一个系统可能涉及多个业务部门，主要费用由某个部门出。例如营销中心下的A渠道出费用，还有B、C两个渠道。实际上，要以营销中心为研究对象，老大应该是营销老总。 把其他涉众当作老大。例如营销管理系统，当然要以营销中心为研究对象。但由于调研安排以及高层间的微妙关系，会出现把市场部当老大的情况。 定位目标机构系统是为某一类机构服务的，除了上述讲的，还要进行目标机构的定位。 这个还是一样，使用类图，辅助定位： 公司目标是盈利，起码要生存。很可能有了一个想法，找到了第一个客户，就以这个为目标客户，进行分析。这个是完全没有问题的，但是必须承认当前做的是项目（针对该客户的定制系统）。设计的时候可以考虑复用，但是做需求不能首鼠两端。 展开一下，国内好多公司规模变大盈利增速却不匹配，就是项目和产品没理清。甚至乎，太多的“卖人头”公司，组织架构真正有产品部的少。最常规的做法是： 做了一个或几个项目，然后形成解决方案，把最大那个项目的代码照搬，这就是1.0产品了。 这样的产品，不说技术架构扩展差，功能的完整性都很难保证。一般的项目，是不会考虑各种分支异常流程的，一些非功能性需求就更没有了。 其他要点 开发团队领导，不是老大 人群和机构，谁是战场。以新浪微博为例，社交媒体平台，那么核心还是媒体属性。研究的应该是大V等产生核心内容的人群，而不是新浪这个机构。 人群和人群，更为稀缺的优先选为战场。例如在线问诊平台，老大应该是医生。当然，现在好多都是拆分为医生端和患者端，这样体验会更好。 根据阶段不同，老大也可以变化。说需求有变化，那是从一个静止的时间点来看。 提炼改进目标 一份愿景中,改进目标可以是一个，也可以是多个，改进目标应该是可以度量的 作者把愿景相关的概念画成了类图： 不是系统功能需求 像目标的表述 不像目标的表述 提高回访订单转化率 建立一个CRM系统 减少每张处理订单需要的人力 提供自助下单功能 缩短评估贷款风险的周期 能够对贷款申请作风险评估 改进目标和系统功能是多对多的：一个改进目标可能会带来系统的多个功能，一个系统功能可能覆盖多个改进目标 如上图中，“提高防汛决策准确度”是改进目标，不是功能。系统没有提供这样一项功能，领导输入一个准确度数值，确认，防汛决策准确度“duang”的一下就提高了。需要在各个岗位分别使用“查看云图”、“上报水库运行情况”等功能之后，带来的综合效果是，防汛组织在“防汛决策准确度”这个指标上得到了改进。 思考度量指标，可用以下方法： •针对形容词来思考符合这个形容词和不符合这个形容词的情况。 •从初步设想的解决方案倒推。思考如果没有这个解决方案，涉众要付出什么代价。 •借鉴机构的KPI*（关键绩效指标）： 不是系统质量需求 改进目标针对的是组织某个行为的指标，而不是系统行为的指标。 质量需求 改进目标 从接收到请求到回应的时间应在2秒之内 缩短申请的平均审批周期 改进是系统带来的某医院护士系统开始的愿景如下所示： 系统 老大 目标 移动病区护士系统 Z大学附属第医院院长 张* 减少医疗事故 这个目标太大了，叫做正确的废话 通过如下类图，进行分析： 护士的主要工作是输液、抽血等，以输液为例。系统能解决的，主要是操作层面的问题，所以恰当的目标应该是： 系统 老大 目标 移动病区护士系统 Z大学附属第医院院长 张* 减少错误执行医嘱事件的发生率 多个目标之间的权衡 如果愿景里只表述了一个改进指标，那么可以缺省地认为其他指标是不变的。不过，有的时候老大的改进可能会有多个目标（当然也带来了多个指标），而且目标之间还有可能会产生冲突。这时，需要对目标排序，揣摩出老大首要关心的目标。 软件行业有个著名的不可能铁三角， 范围S、进度T、成本C ， 当然也可以说是项目的四要素：范围、进度、成本和质量。 理论上，是没有又实时访问、速度又快的多维统计报表提供给高层决策的。以大屏BI举个例子： 市场面上大屏BI常见方案，也就是销量数据时刻前端自增更新，后端服务器ETL调度执行，定期同步数据。 这种方案，是由于老大更看中“准确”，但对数据的时效性又有一定的要求。但哪怕硬件条件很好，也就是1分钟上下刷新一次。部分复杂的统计逻辑，1分钟内可能ETL都跑不完。","categories":[{"name":"需求分析","slug":"需求分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/需求分析/"}],"tags":[{"name":"业务建模","slug":"业务建模","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/业务建模/"}]},{"title":"业务建模--建模工作流与UML","slug":"业务建模--建模工作流与UML","date":"2019-04-23T05:20:28.000Z","updated":"2019-10-27T10:03:54.932Z","comments":true,"path":"2019/04/23/ye-wu-jian-mo-jian-mo-gong-zuo-liu-yu-uml/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/04/23/ye-wu-jian-mo-jian-mo-gong-zuo-liu-yu-uml/","excerpt":"","text":"本文为《软件方法-业务建模和需求》的读后感系列，可在线试读 工作流定义软件工程中阶段中的的计划、需求分析和设计阶段，都需要进行建模： 工作流 描述 业务建模（严格来说叫组织建模） •组织内部各系统协作•组织引进一个软件系统，和招聘一批新员工没有本质区别 需求 •描述为了解决组织的问题，系统必须具有的表现——功能和性能•从“卖”的角度思考哪些是涉众在意的、不能改变的契约，哪些不是，严防“做”污染“卖” 分析 •提炼为了满足功能需求，系统需要封装的核心领域机制•可运行的系统需要封装各个领域的知识，其中只有一个领域（核心域）的知识是系统能在市场上生存的理由 设计 •为了满足质量需求和设计约束，核心领域机制如何映射到选定平台上实现。 误解软件开发人员如果对以上工作流没有概念，就会把这些工作通通称为“设计”或者“文档”，产生以下误解： 例如问开发人员在做什么，回答“我在做设计”、“我在写文档”，其实他的大脑可能正在思考组织的流程（业务建模），或者在思考系统有什么功能性能（需求），或者在思考系统要包含的领域概念之间的关系（分析），但他通通回答成“在做设计”、“在写文档” 又有牛人认为“代码就是设计”。本来“设计”在他脑子里就是“代码以外的东西”，这么一推导，不就变成了：代码就是一切？ 把工件简单分割为代码和文档（或设计），背后还隐含着这样的误解：认为模型（文档）只不过是源代码的另一种比较概要或比较形象的表现形式。 边界 不同工作流产出的工件之间的区别不在于形式，而在于内容，也就是思考的边界 UML建模 建模不一定非要用UML，也可以用文本或其他自造符号来表达。每个项目中，团队一定会思考和表达建模思想，只是可能无意识、不严肃的做。 UML全称Unified Modeling Language，翻译过来叫做统一建模语言，是非专利的第三代建模和规约语言。 为何钟爱UML大家看看有没有遇到这种情况：开会讨论问题，某些人就是白板手绘草图，“来，我给大家讲讲”。我感觉这种特别常见，基本是画流程图和活动图、时序图的混合体，以及ER图、类图糅杂砸一起。 这样的做法有巨大的“优点”：怎么画都是对的，关于这个草图的解释权归“我”所有。同事不好批评“我”，项目要依赖于“我”头脑中的隐式知识——要是“我”不“给大家讲讲”，大家就玩不转了。这样，“我”在团队里的地位就提高了。上面这种现象，在有一定资历、但又不对项目的成败承担首要责任的“高手”身上表现更明显。 这种做法的本质是想通过形式上的丑陋来遮掩内容上的丑陋。 掌握统一的建模语言之后，开发团队在基本共识上沟通，会大大提高沟通的效率和深度，有意无意遮掩的脓包也会强制露出。开发人员如果习惯于画“草图”，用“模块”、“特性”等词汇含糊不清地表达思想，在严谨建模思维的追问之下，往往会千疮百孔，暴露许多之前没有想到的问题。 作者特意提到： 使用UML沟通仅限于软件组织内部，UML模型不是用来和涉众沟通的！ 跟客户沟通，还是Visio那种流程图、泳道图合适。跟客户谈业务流程，这种形式更合适。 建模UML图UML2.5中，已经有14种图： 不是所有图都要在建模工作流中使用，下面是建模工作流推荐的UML图： 可选和推荐的建模元素用法（●：优先使用，√：可以使用 ） 这里简单介绍下使用的UML图形 用例图 简单来说，用例图的目的如下： 用例图用来收集系统的要求 用例图用于获取系统的外观图 用例图识别外部和内部因素影响系统 用例图显示要求之间的相互作用是参与者。 下面是一个示例用例图，代表订单管理系统。因此，如果我们看看图，那么我们会发现三个用例（订单，特殊订单和正常订单）和一个参与者：顾客。 SpecialOrder 和NormalOrder 从订单使用情况扩展。因此，他们扩展了关系。另外很重要的一点是确定系统边界，这是图中所示。参与者是客户以外的系统，因为它是系统的外部用户。 再举一个包含关系的例子： 包含关系描述的是一个用例需要某种功能，而该功能被另外一个用例定义，那么在用例的执行过程中，就可以调用已经定义好的用例 类图 类图可以用来：描述系统的静态视图。显示静态视图中的元素之间的协作。由系统执行的功能的描述。构建软件应用面向对象的语言。 举个例子： 车的类图结构为&lt;&gt;，表示车是一个抽象类； 它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示； 小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示； 小汽车与发动机之间是组合关系，使用带实心箭头的实线表示； 学生与班级之间是聚合关系，使用带空心箭头的实线表示； 学生与身份证之间为关联关系，使用一根实线表示； 学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示； 序列图 状态图 UML 状态图是图表本身的名称，主要用于描述对象具有的各种状态、状态之间的转换过程以及触发状态转换的各种事件和条件。 使用状态图的主要目的： 为了模拟系统的动态环节 反应系统模型生命周期 一个对象来描述不同的状态，在其生命周期的时间。 定义一个状态机模型状态的对象 当发生特定事件时，对象可能会发生状态的变动。 绘制状态图之前，我们必须明确以下几点： 识别对象，以进行分析 识别对象的各类状态 识别各类的事件，尤其是直接导致状态改变的时间 举个例子： 活动图 UML 活动图能够捕捉到该系统的动态行为，UML 中其它的四个图是用来显示从一个对象到另一个消息流，但活动图是用来显示消息流从一个活动到另一个活动图。以下是 UML 活动图目的描述： 绘制活动流程系统 描述的顺序从一个活动到另一个 描述系统并行，分支，并发流。 以找饮料为例子： 上述的图将人视为开始起点有些奇怪，整体上是没有问题的。 包含子活动，如下图所示： 其中pay for the book为子活动，子活动的结束符号可能是其他样式","categories":[{"name":"需求分析","slug":"需求分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/需求分析/"}],"tags":[{"name":"业务建模","slug":"业务建模","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/业务建模/"}]},{"title":"业务建模--竞争优势","slug":"业务建模--竞争优势","date":"2019-04-21T14:20:28.000Z","updated":"2019-10-26T05:51:17.645Z","comments":true,"path":"2019/04/21/ye-wu-jian-mo-jing-zheng-you-shi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/04/21/ye-wu-jian-mo-jing-zheng-you-shi/","excerpt":"","text":"本文为《软件方法-业务建模和需求》的读后感系列，可在线试读 认知红海时代俗话说的好：人无我有，人有我优，人优我廉，人廉我走。 上大学用DreamWeaver学网页，老师说过：2000年那时候，40张图文的HTML静态页，可以要价2万RMB。现在么，建站服务几千块就能搞定。国内某个电商建站服务商，现在转型做小程序去了。 在这片红海之中获取竞争优势，是每个企业努力的目标。 解读利润公式 企业一般是指以盈利为目的，运用各种生产要素（土地、劳动力、资本、技术和企业家才能等），向市场提供商品或服务，实行自主经营、自负盈亏、独立核算的法人或其他社会经济组织。 –百度百科 会计学上的定义， 营业利润=营业收入－营业成本－税金及附加－销售费用－管理费用－财务费用－资产减值损失+公允价值变动收益（－公允价值变动损失）+投资收益（－投资损失）+资产处置收益（-资产处置损失）+其他收益。 简化一下，简单理解为：利润=收入-成本-费用。 现在较为通用的SaaS模式，客户一般会持续的租赁软件。续费客户的费用几乎可以忽略，即利润 = 收入 – 成本。 成本，主要是场地费+研发相关费用。一个良构的设计，可以显著降低开发成本和实施改动成本。客户规模到一定量级，可以有效的摊低研发费用。 收入，基本是由研发部给指导价格，营销部根据市场去调整的。最核心的，还是软件功能丰富体验良好，匹配客户的需求。所以，需求的好坏直接决定了软件的收入。 综上，利润=需求-设计。 “需求”和“设计”两个术语有两种用途： 用于表达建模得到的结果，例如“需求和设计不是一一对应的” 另一种用于表达建模的工作流，即需求工作流和设计工作流，例如“我正在做需求”。为了得到需求，需要做的建模工作流有业务建模和需求。为了得到设计，需要做的建模工作流有分析和设计。 分离需求设计 如果需求和设计不分，利润就会缩水 需求映射设计如果直接从需求映射设计，就会带来重复的代码。举个例子： 需求描述 设计 A部门需要管理铺货，制定铺货标准，让下面的人按标准执行 A部门铺货管理 B部门需要管理铺货，制定铺货标准，让下面的人按标准执行 B部门铺货管理 C部门需要管理铺货，制定铺货标准，让下面的人按标准执行 C部门铺货管理 D部门需要管理铺货，制定铺货标准，让下面的人按标准执行 D部门铺货管理 由于各部门管理理念有一定差异以及一些其他因素，我真见过系统是这样设计的。 设计映射需求如果直接从设计映射需求，就会出现假的“需求”。好多人觉得不可思议，设计怎么会映射到需求？就B端产品，做个分析： 一般B端是以项目交付为主的，早年没有PaaS的时候更是各种二次开发。项目积累够了，就会想要抽取共性做成产品，基本上是这样操作的： 一线客户基于自己的角度给出功能 项目基于已有零碎场景，直接进行设计 项目成功上线，形成解决方案 由于人员流动，且为了可落地，产品方案大量参考项目方案 产品设计参照项目设计，进行整合以及体验的优化 举个具体的例子： 项目功能点 实际场景 设计倒推需求 真实需求 城市等级管理，可以定义城市的等级，如直辖市、副省级市、地级市、县级市、镇级市、特别行政区等，还能额外定义国家中心城市、省会城市等 某类活动费用的投放上限，根据城市的等级（国家规定的城市等级划分）有所不同 需要有城市等级的功能，费用控制需要用到 同步国家最新行政区域，以及对应的城市划分，并且能够为城市打上自定义的标签。 需求设计分离 需求 设计 一个人，可以走路、跑步、跳跃；他还会举重、投掷、游泳； 运动系统子、神经子系统、呼吸子系统、内分泌子系统、循环子系统 他会进食，也会排泄； 消化子系统、泌尿子系统 极端情况，迅速反应，避免受到伤害； 神经子系统-反射 他可以繁衍后代。 生殖子系统 整体如图： 建模没有借口 借口 实质 “敏捷”、“迭代” ，放弃建模 “迭代”只是一个底线，确实，再高明的大夫也没有把握一个疗程就治好患者，所以要按疗程试试看，但是每一个疗程中，依然要尽力检查、诊断、拟治疗方案。检查、诊断等技能越精湛，所需要的疗程就越少。 “项目时间太紧” 有了计划，才能更好的应对变化 “试错大法” 反客为主，成本过高。 “软件开发是艺术” 艺术也是有迹可循才行 “系统比较特别”，“小系统” 没有什么特别的系统，不同形态的系统各自有各自的复杂性","categories":[{"name":"需求分析","slug":"需求分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/需求分析/"}],"tags":[{"name":"业务建模","slug":"业务建模","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/业务建模/"}]},{"title":"规律--考勤实质","slug":"规律-考勤实质","date":"2019-03-16T13:10:45.000Z","updated":"2019-10-17T03:47:26.462Z","comments":true,"path":"2019/03/16/gui-lu-kao-qin-shi-zhi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/03/16/gui-lu-kao-qin-shi-zhi/","excerpt":"","text":"前面这么多场景，很多时候产品人员选择不断堆砌功能。如果观察到了考勤的本质，就不会一直在救火。 竞品分析在知道有考勤模块的时候，就应该进行同业竞品分析，收集更全的诉求。以今目标为例，其考勤规则覆盖了上面讲的大部分： 考勤规则分为两类，按周循环排班和无规律排班，还可以根据国家法定节假日自动调整。也支持定点考勤（设置考勤范围）。支持考勤机设备，通过人脸或指纹认证（IOT）； 表表齐全，打卡明细报表，按天的汇总报表，按月的统计报表； 兼容请假、消缺卡等情况。 根据上诉的信息，我认为考勤的本质诉求就是确认人在。用各种特性，辅助确认是本人在岗。因为只有人在岗，才能有可能开展工作。即便此时没有业务办理，对外也是企业的形象。前台人一直是空的，相信各位都觉得很奇怪。在此基础上，兼容各种异常情况（请假、调休等），进行灵活的审批处理。一般来说，考勤会影响到工资的发放。所以需要有统计类报表支撑月末回顾，快速定位问题。 所以，考勤模块应该具备以下几类能力： 是否本人 是否在岗 是否准时 是否持续作业 异常处理 报表统计 要从这些个维度出发，去进行功能的设计。以是否本人为例，首先账号密码也是一种隐藏的判定。假如加入虹膜打卡的诉求、乃至采血DNA验证的诉求，都在范畴内。这些判定策略应该是可以自由组合，而不是单一判定的。 打卡规划以打卡功能为例出发，讲讲规划思路。 首先，要有触点，能让用户进行打卡。这个触点没有严格要求，APP、小程序、Web都行。打开页面的时候，需要将帐号信息给到规则解释器。解释器根据帐号信息，找到对应的考勤规则进行计算。计算得到的打卡规则给到考勤打卡页面，进行UI渲染、检测特征和约束。打卡和服务器有个交互，打卡成功后服务器应该返回打卡时间和状态。","categories":[{"name":"通用知识","slug":"通用知识","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/通用知识/"}],"tags":[{"name":"有效思考","slug":"有效思考","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/有效思考/"},{"name":"考勤","slug":"考勤","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/考勤/"}]},{"title":"规律--考勤问题","slug":"规律-考勤问题","date":"2019-03-15T14:10:45.000Z","updated":"2019-10-17T03:52:30.104Z","comments":true,"path":"2019/03/15/gui-lu-kao-qin-wen-ti/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/03/15/gui-lu-kao-qin-wen-ti/","excerpt":"","text":"即便是看似简单常见的考勤模块，不加思索，也会一所再错。（本文为错误示范） 简单小型客户A描述： 上班下班时间固定，早上8:30上班，下午5:30下班。 支持部分特殊情况的处理，如请假、调休和消缺卡 希望系统能提供明细核统计报表， 自动统计出考勤的异常情况（迟到、早退、缺卡等） 最常见最基础的考勤诉求，常规错误操作为直接设计功能点： 客户诉求 系统功能 上班下班时间固定 提供考勤时间的维护功能，系统级参数 移动办公 提供APP打卡功能 兼容异常考勤情况 提供相关的审批能力，包含请假、调休和消缺卡 有据可查 提供考勤明细报表，每个人每次打卡都有记录 自动统计出考勤的异常情况（迟到、早退、缺卡等） 提供考勤汇总报表，查看每天的情况（含异常情况） 提供考勤统计报表，查看每月的情况（含异常情况） 进阶中小型B进一步，还期望： 一天可以要求多次打卡，如早上下班打卡，中午上班打卡（只管理内勤，如办事处助理） 在目标区域一定距离内（如500米），才允许打卡 照片打上水印（时间、日期和定位地址），防止作弊 能检测篡改定位的软件并上报，严抓定位作弊 诉求扩展，提供防作弊能力和内勤人员的管理。常规错误操作，修改功能点为： 客户诉求 系统功能 内勤要求早上下班打卡，中午上班打卡，且要在办公室附近 考勤规则可设置多个上下班时间、地址和可偏离的距离） 外勤人员上下班打卡就好，不做定位限制 可维护多个考勤规则，分配给不同的角色 防作弊 APP打卡的图片带有水印（时间、日期和定位地址） APP提供定位作弊的检测（作弊类型1、安装某版本的作弊软件；2、Root，疑似作弊），上报作弊信息（帐号、时间、作弊类型等） 兼容异常考勤情况 提供相关的审批能力，包含请假、调休和消缺卡 有据可查 提供考勤明细报表，每个人每次打卡都有记录 自动统计出考勤的异常情况（迟到、早退、缺卡等） 提供考勤汇总报表，查看每天的情况（含异常情况） 提供考勤统计报表，查看每月的情况（含异常情况） 这个考勤规则一旦加上，就是所有功能点改一次。因为原有的简单诉求里面，考勤时间是全企业统一的。由一对一改成一对多，取数逻辑修改很多。 复杂中大型客户C期望（全国性集团企业）： 新疆分公司也能正常打卡 周一考勤时间9:00-18:00，周六考勤时间：8:00-17:00，周二到周四是8:30-17:30 不同市场区域，考勤规则有略微的差异 有酒水夜场，需要支持跨天的考勤 部分区域不需要开早会，以第一个拜访到达为签到时间点，最后一个拜访离开为签退时间点 诉求进一步扩展，考勤规则复杂程度急剧上升。常规错误操作，进一步修改功能点： 客户诉求 系统功能 内勤要求早上下班打卡，中午上班打卡，且要在办公室附近 考勤规则可设置多个上下班时间、地址和可偏离的距离） 外勤人员上下班打卡就好，不做定位限制 可维护多个考勤规则，分配给不同的角色 不同时区、不同分司都能正常打卡 可维护多个考勤规则，分配给不同的组织（如新疆分公司） 支持跨天班的打卡 考勤规则维护，可设置跨天考勤 特殊考勤打卡 支持特殊考勤逻辑，自动取拜访时间、图片、定位作为考勤打卡的信息打卡，此时定位地址和偏移距离不起效。 防作弊 APP打卡的图片带有水印（时间、日期和定位地址） APP提供定位作弊的检测（作弊类型1、安装某版本的作弊软件；2、Root，疑似作弊），上报作弊信息（帐号、时间、作弊类型等） 兼容异常考勤情况 提供相关的审批能力，包含请假、调休和消缺卡 有据可查 提供考勤明细报表，每个人每次打卡都有记录 自动统计出考勤的异常情况（迟到、早退、缺卡等） 提供考勤汇总报表，查看每天的情况（含异常情况） 提供考勤统计报表，查看每月的情况（含异常情况） 灵活客户D期望（全国性集团企业）： 促销人员，每天的上下班时间不定 能够随时下发打卡的要求，让其拍照打卡 考勤规则又变，常规错误操作，继续改功能： 客户诉求 系统功能 内勤要求早上下班打卡，中午上班打卡，且要在办公室附近 考勤规则可设置多个上下班时间、地址和可偏离的距离） 外勤人员上下班打卡就好，不做定位限制 可维护多个考勤规则，分配给不同的角色 不同时区、不同分司都能正常打卡 可维护多个考勤规则，分配给不同的组织（如新疆分公司） 支持跨天班的打卡 考勤规则维护，可设置跨天考勤 特殊考勤打卡 支持特殊考勤逻辑，自动取拜访时间、图片、定位作为考勤打卡的信息打卡，此时定位地址和偏移距离不起效。 突击打卡 支持设置突击打卡，下发给对人的人员。强制打卡 促销人员上班班时间灵活多变 自由排班，设置人员每天的上下班时间 防作弊 APP打卡的图片带有水印（时间、日期和定位地址） APP提供定位作弊的检测（作弊类型1、安装某版本的作弊软件；2、Root，疑似作弊），上报作弊信息（帐号、时间、作弊类型等） 兼容异常考勤情况 提供相关的审批能力，包含请假、调休和消缺卡 有据可查 提供考勤明细报表，每个人每次打卡都有记录 自动统计出考勤的异常情况（迟到、早退、缺卡等） 提供考勤汇总报表，查看每天的情况（含异常情况） 提供考勤统计报表，查看每月的情况（含异常情况） 智能客户E期望： 笑脸打卡（比人脸更有趣味性） 声纹打卡 指纹打卡 蓝牙打卡 WIFI打卡 基本上就是一些特征识别的诉求，常规错误操作，继续改功能： 客户诉求 系统功能 内勤要求早上下班打卡，中午上班打卡，且要在办公室附近 考勤规则可设置多个上下班时间、地址和可偏离的距离） 外勤人员上下班打卡就好，不做定位限制 可维护多个考勤规则，分配给不同的角色 不同时区、不同分司都能正常打卡 可维护多个考勤规则，分配给不同的组织（如新疆分公司） 支持跨天班的打卡 考勤规则维护，可设置跨天考勤 特殊考勤打卡 支持特殊考勤逻辑，自动取拜访时间、图片、定位作为考勤打卡的信息打卡，此时定位地址和偏移距离不起效。 绑定不同特征 可绑定声纹、指纹、蓝牙、WIFI和人脸信息 APP端录入私人特征信息，包括声纹、指纹、人脸信息 识别不同的特征，其中笑脸识别需要AI配合 突击打卡 支持设置突击打卡，下发给对人的人员。强制打卡 促销人员上班班时间灵活多变 自由排班，设置人员每天的上下班时间 防作弊 APP打卡的图片带有水印（时间、日期和定位地址） APP提供定位作弊的检测（作弊类型1、安装某版本的作弊软件；2、Root，疑似作弊），上报作弊信息（帐号、时间、作弊类型等） 兼容异常考勤情况 提供相关的审批能力，包含请假、调休和消缺卡 有据可查 提供考勤明细报表，每个人每次打卡都有记录 自动统计出考勤的异常情况（迟到、早退、缺卡等） 提供考勤汇总报表，查看每天的情况（含异常情况） 提供考勤统计报表，查看每月的情况（含异常情况） 提供打卡功能（基于不同的考勤规则&amp;特征，支持跨天考勤），并且打卡的图片带有水印（时间、日期和定位地址）。首次打卡要求录入特征，如笑脸、声纹、指纹。 APP提供定位作弊的检测（作弊类型1、安装某版本的作弊软件；2、Root，疑似作弊），上报作弊信息（帐号、时间、作弊类型等） 提供考勤规则的维护功能（基于区域、岗位，设置规则。可设置特征打卡，包括固定的如WIFI、蓝牙设备以及可变特征如笑脸打卡、声纹打卡、指纹打卡。可设置定位地址、可偏离的距离以及跨天考勤。支持特殊考勤逻辑，自动取拜访时间、图片、定位作为考勤打卡的信息打卡，此时定位地址和偏移距离不起效。考勤时间规则包含三类：1、固定的多个上下班打卡时间；2、固定的单个上下班打卡时间，周一到周日自由设置。3、自由排班，设置人员每天的上下班时间） 考勤下发，Web &amp; APP选择要下发的区域、岗位或者具体人员。且可查看已收到已打卡人数，已收到未打卡人数，未收到人数 收到考勤下发后显示突击打卡页面，强制进行打卡 提供相关的审批能力，包含请假、调休和消缺卡 提供考勤明细报表，每次打卡都有记录（包含突击打卡） 提供考勤汇总报表，查看每天的情况（含异常情况） 提供考勤统计报表，查看每月的情况（含异常情况）","categories":[{"name":"通用知识","slug":"通用知识","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/通用知识/"}],"tags":[{"name":"有效思考","slug":"有效思考","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/有效思考/"}]},{"title":"规律--汽水问题","slug":"规律-汽水问题","date":"2019-03-10T15:30:55.000Z","updated":"2019-10-17T03:48:44.945Z","comments":true,"path":"2019/03/10/gui-lu-qi-shui-wen-ti/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/03/10/gui-lu-qi-shui-wen-ti/","excerpt":"","text":"以汽水问题为例，向程序员致敬，并缅怀自己的编程岁月。以下的所有函数，都是数学表达式，不是编码实现。 简单首先从最简单的场景出发，看看汽水问题的思路。现有问题描述如下： 规则：喝汽水，1瓶汽水1元，集齐2个空瓶才能换一瓶汽水。 前提：现在有20元 问题：到底可以喝多少瓶汽水 一般来说，第一反应肯定是基于前提，按照规则去拆解问题。思路如下： 20元，获得20瓶汽水。喝掉20瓶，剩下20个空瓶 20个空瓶，可换10瓶汽水。喝掉10瓶，剩下10个空瓶 10个空瓶，可换5瓶汽水。喝掉5瓶，剩下5个空瓶 4个空瓶，可换2瓶汽水。喝掉2瓶，得到3个空瓶（5个空瓶中4个去换汽水，剩下1） 2个空瓶，可换1瓶汽水。喝掉1瓶，得到2个空瓶 2个空瓶，可换1瓶汽水。喝掉1瓶，得到1个空瓶 最终是20+10+5+2+1+1=39瓶，且剩下一个空瓶 整体来说就是分解问题，然后逐个穷举： 用钱能买到多少瓶汽水，喝掉产生空瓶，这是直接运算能得到的。 空瓶基于规则换汽水，喝掉再产生空瓶，循环穷举计算 在现有场景下，很多人认为是可行的思路。甚至部分业务程序员，直接就这么编码，导致后期出现性能问题。20元需要1次计算和5次内部循环，下面我们来看看钱多一点的的场景 普通普通场景的规则是一致的，但是钱多了很多。问题描述如下： 规则：喝汽水，1瓶汽水1元，集齐2个空瓶才能换一瓶汽水。 前提：现在有2111元 问题：到底可以喝多少瓶汽水 2110转换成2进制，是100000111110。那么按照上面的方法，至少需要1次计算和11次循环（11次位移）。忽略其他的因素，耗时几乎翻倍。即便这个情况能解决，那么百万元呢？ 此时应该尝试去寻找规律，思路如下（我的高中数学老师应该会很开心）： 利用数学理想，等价于寻找数字的规律（喝汽水瓶数） 列举出足够多的数字 尝试寻找规律 举例验证规律 这个场景中非常的简单，数列如下： 1、3、5、7、9… 通过数学归纳法，得到规律是2n-1。 然后试试前面的20元，刚好是39。再试试13，也是25。 即，n元能喝汽水瓶数： f(n) = 2n-1（n&gt;0） 从算法维度来衡量，这个时间复杂程度就是O(1)，钱的大小不影响。 中等问题描述如下： 规则：喝汽水，1瓶汽水6元，3个空瓶换一瓶汽水。 前提：已知24元，可以喝6瓶汽水 问题：为何可以喝6瓶？假设有x元，可以喝y瓶汽水？ 这个其实分为两个问题，第一个问题是第二个问题的先决条件。 先按照分解问题穷举的思路，发现24元可买4瓶，喝4瓶-&gt;换1瓶并喝掉，剩下2空瓶。此时只有向老板借一瓶汽水，喝完有三个空瓶。将三个空瓶给老板，视为还一瓶汽水。所以，可以喝6瓶。 第一个问题，让我们知道可以借瓶子。再延伸一下，就是空瓶是有价值的。 利用等价转换法分析，可知道一份汽水的价值为4元，一个空瓶价值1元。 所以，y = └x/4┘（x除以4的结果，向下取整） 这里只讨论逻辑，上面的结论实际情况下是很可笑的。假如我刚好有4元，如下操作后可用可以喝到一瓶汽水： 4元向老板买两个空瓶 再向老板借一瓶汽水喝掉，得到1个空瓶 3个空瓶给老板，兑换汽水，还给老板 困难问题描述如下： 规则：喝汽水，x元一瓶，现有促销搞活动：新批次的汽水，y个空瓶可以换一瓶汽水(x、y&gt;=1)。 前提：汽水价格不因促销而有所变动，针对空瓶换的汽水，品牌商会对店老板进行补贴 问题：店老板进货z瓶，品牌商实际应该给几瓶（补贴损失）（Z&gt;y） 这个其实就是困难情况的一般化，继续使用等价转换法： 一份汽水实际价值 = x – x/y 实际进货汽水总数 f(z) = └ z * x / (x-x/y) ┘ 汽水实际价格是原有价格的倍数（x / (x-x/y)），对应的进货量也要乘以对应的倍数。 极难前面，价格都是比较好算的1元，改为3元。问题描述如下： 规则：喝汽水，1瓶汽水3元，集齐3个空瓶才能换一瓶汽水。 前提：现在有n元 问题：到底可以喝多少瓶汽水 和前面类似，先列举出足够多的数据： 如何寻找数字的规律，我认为数学的范畴。反正既然价格是3，就用3倍数进行表示，寻找规律。 一般前面的数字，规律比较难找。以9为分界线（3*3=9,9以后才会出现空瓶换汽水），分段标出。所以规律总结，数学表达如下： 数字分为奇数和偶数，应该可以继续优化，尝试用2的倍数来表达9以后的值： 由于习惯，使用2n-1方式表达奇数。如果用前面的方法，规律不太明显。考虑到是为了从奇偶性角度简化计算，直接从n出发，转换为结果： 地狱问题描述如下： 规则：喝汽水，x元一瓶，y个空瓶可以换一瓶汽水(x、y&gt;=1)。 前提：现有n元（n&gt;=x） 问题：如果可以借汽水，可以喝多少瓶汽水？如果不能，可以喝多少瓶？ 可以借汽水，就很简单了： 一份汽水 = x – x/y 可以喝汽水总数 f(n) = └ n/(x-x/y) ┘(向下取整) 不能借汽水，就无法使用等价转换。参考上一个场景，规律如下：","categories":[{"name":"通用知识","slug":"通用知识","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/通用知识/"}],"tags":[{"name":"有效思考","slug":"有效思考","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/有效思考/"}]},{"title":"有效思考--规律","slug":"有效思考-规律","date":"2019-03-09T09:58:04.000Z","updated":"2019-10-23T08:17:03.280Z","comments":true,"path":"2019/03/09/you-xiao-si-kao-gui-lu/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/03/09/you-xiao-si-kao-gui-lu/","excerpt":"","text":"都说要专注于业务寻找规律，实际工作中却止于表面。产品人员给最粗浅的需求，研发人员做最简单的实现。每次需求调整或增加功能，都是大工程。故做此分享，希望减少此类情况。 本文对研发和产品都有益，包含了算法思维和产品理念。由于很久没做数学题了，不排除过程或结论有问题，欢迎大家指正。配合PPT，效果更佳。 分为以下几块，进行阐述： 汽水问题 考勤问题 考勤实质","categories":[{"name":"通用知识","slug":"通用知识","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/通用知识/"}],"tags":[{"name":"有效思考","slug":"有效思考","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/有效思考/"}]},{"title":"前提的案例实战","slug":"前提的案例实战","date":"2019-02-16T09:05:46.000Z","updated":"2019-10-17T03:56:07.115Z","comments":true,"path":"2019/02/16/qian-ti-de-an-li-shi-zhan/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/02/16/qian-ti-de-an-li-shi-zhan/","excerpt":"","text":"大道理讲了很多，来实战一下。首先来看看，我们深恶痛绝的历史问题。光讲理论太枯燥，也难以理解，会以实际例子的形式进行分享总结。 历史问题错误思路起因：某项目反馈小程序端有异常，下午定位是OK的，但无法获取具体地址，影响了正常的业务流程。今天上午是好的，前几天没大规模推广使用也没问题。 经过：获取项目源代码，然后交由研发人员排查。前端同事表示，这个定位是调用服务端的接口，目前调用接口失败。后端同事排查，发现使用的是高德地图的API，该API调用返回错误码。查找官方document，发现是接口调用次数超额。 定性：高德地图API次数不足，通过切换或增加证书解决。目前使用个人证书，配额6000。企业证书为个人证书500倍，300万。根据现有业务场景，企业证书能满足定位请求。 结果：先让项目团队相关人员申请多几个个人证书，优先让业务正常跑。然后联系企业，申请企业证书。 例子很偏技术，但贴合主题。很多时候，我们的思考到上述的结果就结束，开始行动了。我个人认为这种是有用的思考，而不是有效的思考。即便是我们认为思维相对严谨的程序员，在进度压力下通常也会埋雷。为更好的帮助产品落地，我们遇到问题要仔细分析。 三段论分析以上的思考过程，在我认为可以转换为三段论的形式。但是，不是一个，而是两个。 所有调用接口错误都是接口端的问题，项目调用接口错误，所以是接口端的问题 高德的定位接口都是限额的，我们使用的是高德的定位接口，所以我们是被限额的。 我个人认为，两个三段论都是错误的。我来讲一下我的思路，看看有没有道理： 首先讲第二个三段论，乍一眼看过去是完全合理的，其实犯了三个词项的典型错误。高德的接口都是限额的，我们使用的是高德Web服务的定位接口，所以我们是被限额的？这里面包含了两个高德接口，一个是正在使用的Web服务接口，的确是限额的。但是，高德的定位接口包含Web服务、Android、iOS和JS。更重要的是，Android、iOS和JS等前端API，是不限额的。 推翻了第二个三段论，我们再来看看第一个。第一个三段论是最可怕的，在很多企业的研发体系里面，这是公理般的存在。本人认为，这很有甩锅的意思，头痛医头脚痛医脚。目前高德地图封装JS API，分为Web端和微信小程序。那么，是不是关于获取定位对应地址的操作，应该交由小程序端来完成？这么做有三大好处，第一是解决了API限额，第二加快定位速度，最后降低服务器并发（上下班时间统一打卡定位）。所以从根源来说，根本不是服务端的问题，小程序端更新代码重新上架就好了。 复盘分析问题解决了，复盘下为啥会挖下这个坑： 小程序官方没有提供获取精准地址的能力，颗粒度只到县级市\\区 高德当初没有微信小程序的SDK，只能使用Web端 原有研发离职，交接混乱，导致这块的预警没做好 我们还是要保持清醒，认识到直接原因和根本原因。不过说实话，一些应该由前端做，由于各种原因放到了服务端的事情，是司空见惯了。 全新问题错误思路起因： 某项目需求调研过程中，项目经理直接找到总部技术平台研发，说要增加小程序端推送的能力。希望研发迅速拟定方案，方便引导客户。 经过： 研发询问具体诉求，项目反馈下订单后，订单审批流和收发货业务流都需要推送给对应人员。研发查看小程序官方文档，了解现有小程序的推送能力 定性： 小程序官方推送触发条件比较严格，无法完整实现客户的诉求。使用WebSocket，则需要保证小程序在前台，作为工具类小程序，这个不太友好。公众号这方面就相对灵活，只要小程序绑定公众号后使用公众号的能力即可。 结果：使用小程序+公众号的组合形式，快速落地。 又是一个偏技术的例子，上面的思考过程看起来合理，但又走在错误的路上了。 三段论分析以上的定性思考过程，简单的转换为三段论的形式： 小程序官方的推送是推送给小程序使用者本人，我们推送是给另一个小程序的使用者，所以我们无法使用小程序官方的推送 工具类小程序都是即用即走基本不在前台，我们是工具类小程序，所以我们基本不在前台。 WebSocket自建的推送需要小程序在前台，此种小程序基本不在前台，所以我们基本不能使用WebSocket的推送 公众号推送没有前台和最近7日内活跃的约束，我们希望推送没有前台和最近7日内活跃的约束，所以公众号的推送适合 这里面错的是第一个三段论，不是无法使用小程序官方的推送。我们知道，技术上最不缺的就是黑科技。官方的限制，很多时候是有漏子可以钻的（Android的保活骚扰、绕过应用市场的热更新等）。比较尴尬的是，直接百度一下，第一页就有相关的方法： 这个方法是讨巧的，还是要满足最近7日内活跃的条件，但在实际业务上是7日内活跃是95%以上的。实际策略就是用户实用小程序的时候，每次提交表单，都偷偷的把推送码存起来。然后需要推送的时候，从这里面取过期日期最早的推送码（超过7日的就废弃掉）。成功实现：A下单，推送给B审批处理。 另外还满足了其他的扩展场景： 无条件的定时自动推送，如最常规的每日上下班打卡推送 满足特殊条件的定时自动推送，如月末自动下属的KPI完成情况 备注：图片来源网络，本人与小打卡无任何关系 立场决定方案当然，公众号的方案也是可行的，只是背离了技术平台的初衷。这个方案复用困难，项目自行落地就行。如果技术选型决定公众号方案，也需要对业务方案重新包装。18年9月，小程序发布了公众号关注组件，就可以更方便的让小程序和公众号进行绑定了。完全可以使用公众号关注组件，以更好的推动项目落地。 总结归纳下面简单总结下，个人认为的行动方法。分为历史问题和全新问题，都是短句，不做过多的展开解释。 应对历史问题报障，现有思路大体如下： 应对全新问题，现有思路大体如下： 资源评估里面，综合现有项目合同、人力资源和功能上线的时间考虑。 效率评估，是评估这个方案，在业务执行中，会否造成效率下降。 业务线，是要综合其他业务线的一些诉求，非通用平台类的诉求忽略掉。","categories":[{"name":"通用知识","slug":"通用知识","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/通用知识/"}],"tags":[{"name":"有效思考","slug":"有效思考","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/有效思考/"},{"name":"小程序","slug":"小程序","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/小程序/"}]},{"title":"前提的定义释义","slug":"前提的定义释义","date":"2019-02-15T12:53:46.000Z","updated":"2019-10-17T03:58:19.788Z","comments":true,"path":"2019/02/15/qian-ti-de-ding-yi-shi-yi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/02/15/qian-ti-de-ding-yi-shi-yi/","excerpt":"","text":"我们来聊一聊前提是什么。先从字典上，查看官方的定义。再从三段式推理理论中，知晓大前提和小前提的区别。 字典释义我们先看下新华字典，最经典的词典，是我们最先接触的词典，也是世界上销量最大的词典。词典中对于该词没有详细的解释，只有个简单的基本解释“作为推理的根据的判断”。然后举例，如在“正义的事业一定胜利，我们的事业是正义的事业，所以我们的事业一定胜利”这个推理中，前两个判断是推理的根据，称为前提。 接下来看看现代汉语词典，关羽现代汉语词典，大家都不会陌生。其在百度百科中的描述是，“学习汉语的一部重要辞书，即从1949年中国当代史为词语基础的释义辞典，1999年开始出版后历经五次修订完善了现代词语的解释，是老少皆宜的汉语学习工具书。”可见，这是最官方权限的字典，对释义的参考作用极大。对于前提共有两个解释，一个是推理中可以推导出一个判断的判断，另一个是事物的先决因素。 三段论字典上的解释就这么多，但引证解释给了我启发。三段论这种演绎推理的经典理论，含有对前提的定义。不妨师从阿基米德，学习三段论，了解大前提和小前提。 定义首先来定义下，什么是三段论。简单来说，这是一种，“大前提，小前提，结论”式的推理。我们来举个例子，看看下面的表格。文字上的描述是，所有的偶蹄目动物都是脊椎动物，牛是偶蹄目动物，所以牛是脊椎动物。非常经典的三段论格式，结论是成立的。 三段式有个所谓的公理，可以很好的指导我们判断经典的三段论是否成立。三段论公理：如果一类对象的全部都是什么，那么，它的部分也必然是什么；如果一类对象的全部都不是什么，那么，它的部分也必然不是什么。其中联系大小前提的词项叫中项(M)，在前提中出现两次；出现在大前提中，又在结论中做谓项的词项叫大项(P)；出现在小前提中，又在结论中做主项的词项叫小项（S）。 错误前提知道了三段论的定义，也了解了三段论公理。我们来看看，哪些错误的前提，会导致错误的结论。 三个词项。三段论中包含大前提和小前提，前提中包含大中小三个词项。如果出现了第四个，则不符合三段论，无法推出结论。 举个例子：人已经存在几百万年了，而你没有存在几百万年，所以你不是人。这个三段论中，人是大项，几百万年是小项，你是中项。但小前提中的“人”和大前提中的“人”，不是一个概念，违反了“同一律”。用英语来翻一下可能更容易理解，Humans have been there for millions of years, while your body have not existed for millions of years, so you are not a human。一共出现了四个词项“人类，几百万年，你，人体”，中文的省略、特指还是博大精深。 中项周延。中项周延，意味着前提中必须至少出现一次带有“所有”量词的判断。如果一个范畴项被称为是周延（Distribute）的，那么表明这个范畴的所有个体都被涉及到。在陈述如“所有 A 不是 B 就是 C”中，项 A 是周延的，因为集合 A 的所有元素都被指出了。而项 B 和 C 不是周延的，有的 B 和 C 不是 A。如果前提是以“有些”开头的判断，结论也是以“有些”开头的判断，那么补充的前提一定是以“所有”开头的判断。 举个例子：一部分中国人很有钱，北京人是一部分中国人，所以北京人很有钱。这个相信大家都觉得是有问题的，北京人是一部分中国人，但不一定是有钱的那一部分中国人。出现了中项两不周延的问题，无法推导出结论。 大项扩大，小项扩大。这个字面上比较好理解，就是扩大了大项或者小项的范围，得出了错误的结论。 先举个例：薯类都是高产作物，薯类都是杂粮，所以杂粮都是高产作物。薯类是“一种”杂粮，结论却是：“所有”杂粮是高产作物。小前提是“一种”，结论是“所有”，就是“小项扩大”。 又如，律师都是熟悉法务知识的，A公司的管理人员都不是律师，所以A公司的管理人员都不熟悉法务知识。律师是“部分”熟悉法务知识的人，结论却是管理人员不是“全体”熟悉法务知识的人。大前提是“部分”，结论是“全体”，就是“大项扩大”。 前提都为否，结论不必然。大前提、小前提都是否定句，所以不出必然的结论。 举个例子：鸟不是胎生的，这些动物不是鸟，所以这些动物？如果简单的认为，结论是这些动物不是胎生的，就犯了前面讲的大项扩大的问题。鸟是“部分”不是胎生的动物，这些动物不是鸟，但到底是不是胎生的，根据已知信息无法得出确切的结论。 前提有一否，结论必为否。大前提、小前提中有一个是否定句，结论一定是否定形式的。 举个例子：人非草木，哲学家是人，哲学家非草木。","categories":[{"name":"通用知识","slug":"通用知识","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/通用知识/"}],"tags":[{"name":"有效思考","slug":"有效思考","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/有效思考/"}]},{"title":"前提的重要意义","slug":"前提的重要意义","date":"2019-02-12T10:41:53.000Z","updated":"2019-10-17T04:15:39.239Z","comments":true,"path":"2019/02/12/qian-ti-de-chong-yao-yi-yi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/02/12/qian-ti-de-chong-yao-yi-yi/","excerpt":"","text":"那些名人，如何看待前提？严谨逻辑学，又是如何定义错误的前提？前提错了，对个人乃至社会有什么影响？本文将一一解答上述问题 佳句赏析关于前提的重要性，古今中外各领域的人士都有很深刻的认知，下面举两个例子。 哲学家罗素，曾说过“从错误前提出发的推论，能够推导出任何荒唐的结果”。 这里面有个很经典的故事。据说有人登门拜访罗素，抛出了一个证明题。假设2+2=5，请证明罗素是教皇。罗素的推理如下： 如果“2+2=5”即4=5，那么据换位法可得5=4，再据等量减等量其差必等，两边同减3可得2=1。好了，罗素与教皇是2人，但既然2=1，那么罗素与教皇就是1人，所以“罗素是教皇”。证毕。 罗素可能大家不一定知道，他是英国的哲学家、数学家和逻辑学家，还是历史学家、文学家。其文学造诣很高，1950年凭《西方哲学史》获得诺贝尔文学奖。作为一个哲学家，罗素最大的贡献是和乔治·爱德华·摩尔、弗雷格、维特根斯坦和怀特海一起创立了逻辑分析哲学。 王小波在《沉默的大多数》里面写到，“从正确的前提可以推导出正确的结论，但从一个错误的前提就什么都能推导出来”。 王小波大是中国当代学者、作家，两获《联合报》中篇小说大奖，死后成名。部分人对他很崇拜，认为其特有的方式，直面历史，诠释自由。高晓松认为王小波是“白话文第一人”、“神一样的存在”。冯唐说他是“一个奇迹”、“一个好得不得了的开始”。 为什么把这个两位放在一起，还真是有点原因的。罗素和王小波本人，都对哲学和逻辑学有一定的造诣。王小波的作品，宣扬了自由主义。而罗素，正是西方近代自由主义的代表人物之一。 前提谬误根据维基百科全书的观点，在逻辑中，谬误就是指看起来令人相信但实际上并不是逻辑上可靠的推理或论证。当一个人提出的理由并不足以支持其所提出的主张时，我们就说他犯了谬误。因此，我们把谬误定义为逻辑上有缺陷的、它可以误导人们认为它是逻辑上正确的推理或论证。 定义逻辑学的任务之一就是发现谬误、找出谬误以及掌握这些逻辑错误的具体形式。一个论证是好的，必须同时满足下列三个条件： （1） 所有前提都必须是真的。更进一步说，每个前提都必须是可接受的。违背这条规则的谬误有“不一致谬误”、“前提虚假谬误”、“预期理由谬误”等。 （2） 前提与结论必须是相干的，违背这条规则的谬误被统称为不相干谬误。 （3） 所有前提加起来必须给结论提供足够支持。这里的支持有两种：一是演绎支持，二是归纳支持。前者用演绎有效性标准来进行评价，后者用归纳强度标准来评价。 其中第一条件，就是本次要重点讲述的前提谬误。 实际事例错误的前提，会导致前提谬误，而且影响巨大。下面举几个例子，进行阐述： 第一，攻打伊拉克。2003 年 3 月 20 日，以美国和英国为主的联合部队正式宣布对伊拉克开战，澳大利亚和波兰的军队也参与了此次联合军事行动。当时的布什政府发动对伊拉克战争的理由是什么呢？其中一个重要理由就是美国认为伊拉克拥有大规模杀伤性武器。但事实上，美国搜遍了整个伊拉克，并没有找到大规模杀伤性武器。 事实证明，布什政府的“伊拉克拥有大规模杀伤性武器”这个理由是虚假的。实际情况还不止如此。2003 年 1 月，布什为发动伊拉克战争制造舆论，在国情咨文中指责伊拉克试图从非洲购买铀以制造核武器。而前美国外交官威尔逊却于 2003 年 7 月初在报纸上发表文章披露，他曾在 2002 年应中情局之邀前往非洲就有关伊拉克试图从尼日尔购买铀的情报进行调查，并在总统发表国情咨文之前几个月就提交了调查结论，指出这份情报毫无根据。然而，布什仍将此事作为萨达姆政权的“罪状”之一，威尔逊就此指责布什政府为获得公众支持发动战争，不惜“使用虚假情报”。这更加充分说明了布什政府发动对伊战争的理由的虚假性。 第二，报复社会杀害学生。2018年6月28日，一起恶性杀人事件在上海徐汇区小学门口发生，据报道，一男子持刀伤人，砍伤3名男童及1名女性家长，随后被当场控制。2名男童经抢救无效死亡，另2人无生命危险。警方通报称，犯罪嫌疑人黄某、无业，今年6月初来沪，其交代因对生活无望产生报复社会念头，进而行凶。 这个例子比较复杂，我们来仔细分析一下他的心里活动。他认定自己是受到社会不公正的迫害（生活无望，认为被剥夺了某些特定的东西等），所以要反抗不公，报复这个社会。但是，由于社会里面可能压迫他的那群“权钱”人士都是成年人，他没有能力直接进行报复。他认为“权钱”才能进入的某小学，就选择报复手无寸铁的学生。 将屠刀举向小学生的杀人犯，他选择的前提是：我跟这个社会的某些人群是完全对立的，而那些学生是该人群的一份子，是我对立面的一部分，是我的敌人。于是他可以心安理得地在无辜的幼童身上，宣泄自己对社会的不满。 指导意义明确好前提，对我们的生活和工作乃至科研都有极强的指导意义。 相对论我们知道，指示具体事物的命题，其“真”与“假”在时间和空间上都带有某种相对性，是相对中的绝对。浓妆艳抹有人认为是美，但也有人见了赶紧逃跑。庄子所言“此亦一是非，彼亦一是非”乃中的之说。爱因斯坦相对论中的命题在牛顿经典力学中就是错的、假的，但在接近光速的空间中却绝对为真。在相当长的时间里，相对论不仅遭到学界蔑视，而且当局也对爱因斯坦以“邪说”罪判“绞决”，使他在追逃中度日。谁料，相对论后来却成为现代物理学的跨界线！ 非欧几何“直线外一点能做一条，并且只能做一条直线与其平行”，这是欧几里得几何学中的第五公设。1820年，俄国喀山大学教授罗巴切夫斯基在证明第五公设（承认前四条）的过程中，使用了反证法。但是，在他极为细致深入的推理过程中，得出了一个又一个在直觉上匪夷所思，但在逻辑上毫无矛盾的命题。最后，罗巴切夫斯基得出两个重要的结论： 1、第五公设不能被证明。 2、在新的公理体系中展开的一连串推理，得到了一系列在逻辑上无矛盾的新的定理，并形成了新的理论。这个理论像欧氏几何一样是完善的、严密的几何学。 这是第一个被提出的非欧几何学，人称罗氏几何。从罗氏几何学中，可以得出一个极为重要的、具有普遍意义的结论：逻辑上不矛盾的一些公理都有可能提供一种几何学。这一定程度上启发了黎曼，创立了黎曼几何。 恩格斯说：“只要自然科学在思想着，它的发展形式就是假说。”（《自然辩证法》）仅从这一意义上讲，明确好前提，即使从“假命题”起始的逻辑推理，也为人类思维、为科学研究开辟了广阔的天地。 产品工作以上年某个知名段子为例，某产品提了个需求，APP可以根据用户的手机壳来改变软件主题颜色。研发人员直接表示没有接口，无能为力。产品表示这个你需要做到，你这是不配合。这个段子里面，很明显产品没掌握好前提，可行性的前提。个人以为可行性的前提分为几个层次，第一个是最高层次，世界上现有技术（包含实验室试验中的）能否实现。第二个是中等层次，是否已有商业化方案。第三个，是现有资源，能否实现。如果不能实现，能否简单调整后实现。 其实产品人员蛮不讲理的绝大部分时候，都是忽略了前提： “人家WX都能保证推送服务稳定，我们也一定可以”，对应的就是上述的第三个可行性前提层次。没错，WX可以，但是他打磨了多久。而且国内的ROM都自动将它加入白名单，彻底的忽略了自己内部的现有资源。 “这个功能很有价值啊，必须加上”，从价值出发是很合理的。但是总体资源有限，你要先有减，才能加。要么替换某个低价值功能，或降低某功能的完善度。要么，和研发讨论细节（不排除部分功能预估有偏差），调低部分功能的工作量。","categories":[{"name":"通用知识","slug":"通用知识","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/通用知识/"}],"tags":[{"name":"有效思考","slug":"有效思考","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/有效思考/"}]},{"title":"有效思考--前提","slug":"有效思考-前提","date":"2019-02-11T10:21:16.000Z","updated":"2019-10-17T03:21:53.969Z","comments":true,"path":"2019/02/11/you-xiao-si-kao-qian-ti/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2019/02/11/you-xiao-si-kao-qian-ti/","excerpt":"","text":"有一阵事项推进出现了很多小问题，有点群魔乱舞的感觉。在耐心的梳理下，一步一步解决了。最近有点空闲了，决定针对这些事项的推进，做有效思考系列的总结。 系列主题已经定好了，分别是前提、求真和规律。本次讲的是前提，后续两个将陆续放出。由于前提相关的问题太多了，专门介绍了下逻辑学的概念，没控制住篇幅。若时间有限，可下载PPT粗略浏览，或直奔案例实战。 分别从以下角度，进行阐述： 不可或缺 理论释义 案例实战","categories":[{"name":"通用知识","slug":"通用知识","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/通用知识/"}],"tags":[{"name":"有效思考","slug":"有效思考","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/有效思考/"}]},{"title":"B端需求调研方法论--需求开发","slug":"B端需求调研方法论--需求开发","date":"2018-11-10T15:37:13.000Z","updated":"2019-11-07T03:20:04.870Z","comments":true,"path":"2018/11/10/b-duan-xu-qiu-diao-yan-fang-fa-lun-xu-qiu-kai-fa/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/11/10/b-duan-xu-qiu-diao-yan-fang-fa-lun-xu-qiu-kai-fa/","excerpt":"","text":"需求分析需求分析的过程，大部分是客户无感知的，只能体现在最终的输出物中。 总纲我个人认为主要分为产品（含PaaS）、业务和报表三块。 产品需要考虑： 现有的PaaS配置能力 标准产品逻辑（标准产品已有能力要补充到需求规格中） 公共需求的抽象（分页、导入导出等） 业务需要考虑： 流程和分支节点 事件触发（时间or操作） 特殊字段维护（如订单类型，是通用字典维护，还是专用页面维护，或者写入数据库不提供UI界面维护，甚至直接代码写死） 报表需要考虑： 周期（日报、周报、月报） 样式（动态列头？） 明细流水 统计抽取 历史数据处理 性能 功能清单在需求分析过程中，有很重要的一个点，就是给需求排优先级，尝试切分部分需求。这个在立项时候甲乙双方就有约定，但调研过程往往有变数。所以需要基于调研情况，重新排优先级，切分阶段。 一般都会分成两期上，一期先上某个渠道，搭建好基础。需求的优先级，基本上对内不对外。即便一期的内容，乙方内部也是要排优先级的。每一期的功能清单，都不包含优先级。最终计划怎么排，哪些功能可以如期上，乙方内部要心里有数。 最终输出功能清单是全量的，一般附带在需求规格中。但是会加上标注，区分每一期的内容。这个功能清单基本是页面级别的，颗粒度比较粗。 业务解决方案售前阶段已有解决方案，是比较靠近标准产品和行业的。而业务解决方案则是落地，贴近企业实务。基本上，是调研汇报内容的总结和升华。 部分项目中，这个由项目经理编写，产品做辅助支撑。产品需要提供各个业务的流程图和设计原型，匹配业务诉求。 另外部分重点项目，这个由产品独立解决。这种方案有点偏咨询，除了本次调研的业务还涉及其他的相关系统。要基于行业营销信息化的认知，去构建大营销系统的蓝图。所以什么AI、数据中台，统统都上。 原型验证原型验证基本上是和业务解决方案同时开始的，业务解决方案中包含重点业务的原型图。一旦业务解决方案得到认可，就开始细致的原型验证阶段。这个阶段客户会开始看UE，原型的改动非常多。 举个例子，B端是非常喜欢单据式布局的。一方面是使用习惯，另一方面是单据布局直观紧凑。尤其是APP端，经常出现客户选择表格布局替代卡片布局的情况。 需求规格说明书CMMI的定义中，交付物包含用户需求规格说明书和产品需求规格说明书。实际项目中的需求规格说明书，基本上是用户需求规格说明书。这是常态，只有基于业务的描述才能和甲方进行确认。但很多研发是没有业务背景的，看这份用户需求很难直接进行概要设计。基于成本考虑，部分细节会一并在这份用户需求规格上。 所以，我们看到的项目的需求规格，大部分时候是四不像的大杂烩。一般包含：用户需求规格说明书+字段细分说明（部分会省略）+接口说明+状态流程说明（审批流、订单业务流等）。却又缺少了关键的需求建模信息（主要是领域建模），研发要频繁的找产品问业务，才能进行概要设计。 项目的需求规格，基本上是和原型同步启动的。但我个人建议是原型验证后，再贴原型图。最好文档基本确认完成，再贴原型图。期间原型图可以生成html打包，邮件给甲方查阅。不这么做，就是以下的情况： 以会议纪要的形式记录改动点，晚上回去后要先原型。原型改好要截图，贴到PRD。但经常出现，原型图和PRD字段不匹配。 以屏幕扩展的方式投屏，客户要修改的，现场标记或者改好。回去匆忙改原型，准备后面的原型验证。后面再补PRD，很容易造成遗漏（因为是密集的原型验证，这期间客户不看PRD，导致PRD和原型脱节）。 原型验证完成，开始评审PRD。开启审阅+批注后，打开和保存文档不是一般的卡 补充说明： 产品需求规格中，需求建模主要包含用例图（内部WBS拆解够细，可不出）、类图（可简化为ER图）、序列图（可简化为活动图）、状态图。以订单领域为例： 用例图，订单的所有用例，如查看查询、新增、编辑、导入、导出、审核、发货、收货 类图，订单类的成员名和字段类型乃至长度，以及审批单、发货单、送货单、收货单等附属单据信息。 序列图，订单的全流转过程。 状态图，订单的先后状态和触发状态变更的操作","categories":[{"name":"需求分析","slug":"需求分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/需求分析/"}],"tags":[{"name":"需求调研","slug":"需求调研","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/需求调研/"}]},{"title":"B端需求调研方法论--调研中","slug":"B端需求调研方法论--调研中","date":"2018-11-07T15:24:26.000Z","updated":"2019-11-07T03:20:03.567Z","comments":true,"path":"2018/11/07/b-duan-xu-qiu-diao-yan-fang-fa-lun-diao-yan-zhong/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/11/07/b-duan-xu-qiu-diao-yan-fang-fa-lun-diao-yan-zhong/","excerpt":"","text":"整体方法三字诀永恒的三字诀–问听记。 刚接触调研，可能觉得记是最困难的。一般带新人，也是让他从记开始。客户讲了很多，到底记什么。客户讲的很快，记不过来等等。建议开始调研的时候带上纸笔，这种时候写字反而可能比打字快。然后可以开启录音，记不清的（先记录个时间）可以回去再听。 经历个一两次，会知道问是最困难的。调研的过程，基本就是一问一答，基于已有的知识和听到甲方的回答进行提问。整体的节奏被提问人员控制，只有自己感觉获取足够多的信息，能将业务流程串联起来，足够输出需求规格，才会停止发问。建议在问完一个大的问题后，提出归纳类问题“那我说下我目前关于X的理解，看看对不对”。这样才能确保你的信息是足够的，且甲乙双方的认知是统一的。 这里要特别强调下——少一点套路。项目调研往往，过于期望“引导”客户。无论你在这行混了多少年，奋斗在企业营销一线的才是专家。即便同行业规模类似的企业，渠道的模式和具体的玩法上都会有差异。所以不要尝试从业务合理性上去否决诉求，最多只能是技术代价比较高（技术无法实现的，请直接否决掉）。能做的引导，是保证实现目标的前提下，往现有产品靠拢，选择简单的实现方式。 5W1H分析法这个是很成熟的方法不做展开，简介如下： 需求调研过程中，往往会出现甲方问诸如“列表页面，要有标签或Icon区分出来XX信息”这种问题。这其实是跨阶段了，需求调研阶段要解决的是业务是什么，为什么这么做，怎么协作完成。怎么设计UI页面，那是后面原型验证&amp;解决方案阶段的事情。 遇到这种情况，调研人员不能简单考虑可行性，要先内心自问： 为什么要区分？ 不区分有什么影响吗？ 为什么在这里区分？ 是不是可以在其他地方区分？ 如果自己无法回答，要问清楚为止，再给出自己的方案进行协商。如果可以回答，倒是可以简单的说“OK，这个我们到时候会有的”。 业务捕获业务捕获分为三块，分别是组织架构、业务架构和业务实务。这里面有非常繁杂的逻辑，就列一些要点大纲，不做展开。 组织架构先讲组织架构，这个基本上最核心的。而绝大部分人员脑海中，组织结构图就是一棵树。导致甲方给的资料是这样，乙方提供的系统也是如此。 实际在营销CRM系统中，至少要被拆分为两棵树。一颗是企业的机构树，企业下面分了多少个部门。 另一颗是各部门的树，继续分拆。这样能实现，财务部老总看到所有营销部门的销售数据，财务部某个财务主管看到营销部南方战区的销售数据。组织架构基本和权限设计绑定，是CRM系统的基石，要仔细考虑。 业务架构业务架构，一般细分为部门业务和岗位设置。关于部门业务，需要注意以下几点： 哪些部门和项目相关 这些部门各自分管哪一块，怎么考核 对照的职责是否都在系统上落实，工作流全部跑通 了解推力和阻力，尽量让每个部门都有所获益 各组织节点，部门设置是否一致。或者整体职责是否一致，只是有所合并拆分（最怕遗漏了某个部门，而且这个部分流程全部特殊） 关于岗位设置，从下述的几个方面提问： 岗位的大概目标，考核的大概方法（KPI） 岗位间的协作和上下级关系 哪些岗位需要对外（区分内外勤人员） 哪些岗位会启动新流程 各层次岗位是否能统一 是否出现一人多岗的情况（业务人员兼主管是很常见的） 是否已有内部系统编码，领导是否要显示最前面 这里面，强调下岗位的问题。如果一人多岗，会影响整体系统的设计，尤其是权限那块。 业务实务岗责清单，会细分为岗责清单和业务表单。 岗责清单，即每个岗位的职责，注意事项如下： 岗位的具体职责 什么时候履行职责，是事件触发，还是时间触发（如月底做报表） 工作的要求，时间节点限制、质量要求 工作成果如何提交，是否有工作报告，有没有统计诉求 经手哪些数据 向哪些对象汇报，这涉及到数据、流程 业务表单，即实际业务发生中录入信息or统计信息。需要注意以下几点： 编号 分类（归档的，审批流转的，自动产生的，创建的） 旧数据如何处理（同比环比的问题） 具体字段和内容 涉及的流程（多节点流转的审批流？还是单步审批） 节假日处理 请假的处理（替班？） 业务周期（晚上繁忙？） 统计周期（日报表、周报表、月报表） 技术捕获技术捕获，主要是技术层面的诉求，也存在很大的风险。 遗留系统方面，注意以下三点： 是否并存，并存到何时，职责切分 能否替代，替代节奏和方案 数据能否迁移，迁移方案 外部系统方面，注意以下4点： 是否并存 能否替代 接口 数据 剩下的是一些非功能性需求，一般有： 可靠性 可用性（注意体验） 有效性 可移植性 调研汇报调研节奏普遍较快，密集的1-2周。调研人员每天晚上就是写会议纪要以及跟进问题，很少时间进行需求设计。再加上项目人员一般设计能力有限（大部分项目经理是axure略懂而已），需要请求总部资源，调研结束后一般就回总部。然后1-2周进行需求设计输出原型，项目经理配合产品出解决方案。 但是这个阶段有个空窗期，且搜集信息未得到确认。最好联系甲方项目经理，组织部分干系人，进行需求调研汇报。汇报的内容主要包含： 组织架构图 分部门的岗责清单（Excel） 重点业务流程&amp;审批流程梳理（Visio） 核心业务原型图（axure）","categories":[{"name":"需求分析","slug":"需求分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/需求分析/"}],"tags":[{"name":"需求调研","slug":"需求调研","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/需求调研/"}]},{"title":"B端需求调研方法论--调研前","slug":"B端需求调研方法论--调研前","date":"2018-11-04T09:24:13.000Z","updated":"2019-11-07T03:20:00.659Z","comments":true,"path":"2018/11/04/b-duan-xu-qiu-diao-yan-fang-fa-lun-diao-yan-qian/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/11/04/b-duan-xu-qiu-diao-yan-fang-fa-lun-diao-yan-qian/","excerpt":"","text":"基础捕获既然是去项目进行调研，再不济也知道甲方客户名称。有了客户名称，基本能获取到以下方面的资料： 主营业务，以及所属行业 在行业中的地位 经营的产品，以及对应特性 资本构成 组织架构（尤其是营销组织） 营销渠道 下面以益力多为例，讲一下获取信息的途径。 通过启信宝、天眼察、企查查等网站，可以找到益力多的信息。经营业务包括进口、乳制品、保健品等。保健品，就可能有溯源的诉求（主要怕伪劣产品吃出人命）。 公司的相关信息，还可通过官网得到。从官网首页导航栏中，很容易找到“乳酸菌巨头”这个信息。 另外，官网显示的产品信息中只有低糖（蓝色装）和正常（红色装）两种。典型的大单品模式，一如红牛定义了牛磺酸功能性饮料。益力多从港台进驻，定义了大陆的乳酸菌饮料。 股权穿透图显示株式会社Yakult本社控股50%，香港益力多控股35%，养乐多10%。看起来似乎是日资+港资+中资，但深追一下发现不那么简单。 追溯历史，Yakult是日本企业，先后进入港台。香港是粤语音译为益力多，台湾则普通话音译为养乐多。2001年左右从香港进入华南地区，成立广州益力多，覆盖华南及海南。2年后在上海设立养乐多公司，覆盖大陆其他地区。所以，日资无误，控股占比相当高。 日资企业的特点不用说了，什么部长、课（科）长之类的岗位是必备了。然后日资注重上下级关系，严格的业务流程&amp;一堆审批流是必须的。 组织架构是比较难从网络上获取到，基本上是用“公司名称+组织架构”在百度文库中查找。益力多没有，康师傅这类倒是有。 营销渠道也是非常难获取到的，用“公司名称+渠道”可以尝试在百度中查找。益力多找不到，同为乳制品的蒙牛有。 进阶捕获这一块因企业、项目而异，因为各个企业的营销玩法不一样，各个项目的立项方式也有区别。整体来说，就是从营销线和实施线获取资料。 这些资料的捕获，就靠自己发挥才能了。部分信息很敏感（如合同金额），企业内部不让随意传阅，可以要求仅截取部分信息。实在没有办法，可以尝试让上级协助。 营销资料营销线的资料包括： 售前报告 合同（细化拆解为部署方式、三方对接系统和SOW，但部分合同SOW几乎等于没有） 以售前报告为例，可能从该项目的销售、售前或者PMO（部分项目可能尚未走完立项流程）那边获取。一般售前报告会有Base产品模块的客户诉求描述，并且会突出某部分和现有产品有差距，这就是我们要的关键信息。 实施计划实施线的资料包括： 计划交付版本（Base的标准产品版本） 项目计划（细化拆解整体计划排期和调研计划） 负责模块（极少单兵作战，需要分工合作） 需求规范（交付物以及对应规范，根据项目等级有个内部规范。调研过程中，再和甲方确认） 以调研计划为例，可尝试从销售、售前和项目经理处获取。但是初步的调研计划很粗，通常都是项目经理。一方面调研完成时间根本不可能（Deadline倒排法），另一方面调研的顺序等都不符合你的做事方式。建议立刻和项目经理沟通，看看能否调整（只能调调研先后顺序，deadline是红线）。 高阶捕获高阶捕获，主要是 产品捕获准备一份计划交付版本的产品功能清单，项目的功能清单将基于这份，进行裁剪和新增。 充分了解产品的内部逻辑，特别是牵一发而动全身的主数据关联。举个例子，终端的某个字段，标准产品里面是必填非空的。但这个项目不需要，那么这个字段不能被删除的，要给个默认值才能正常往下跑，并且后续功能都会受到影响（页面都要隐藏掉这个字段）。 充分了解PaaS能力（无PaaS的就多储备点技术吧），能衡量改动的代价。客户提出诉求（一般已经是具体的UI、UE层面），先判断需求是什么。为达到目标，是否有更低成本的方式。又或者，是否有更通用的方式，为后续该功能点产品化做准备。 竞品捕获现有项目基本是两种： 替换已有系统； 新上系统。 针对前者，一般能提前拿到UAT环境，进去看看能知己知彼。针对后者，大部分项目是公开招标。招标过程中基本试用或POC过，所以会有竞品的一些资料。如果能借机能拿到竞品的环境，就是很好的竞品分析机会，也能提前准备。 举个例子，以下是随便找的车销解决方案，可以看出大体流程和业务支撑能力。 甲方队友各位要记住，甲方是你的队友。他们也是为这个项目负责的，也希望能如期高质量上线。 根据调研计划和SOW，提前整理出调研准备物，让甲方项目团队提前启动，参与部分调研工作。 举个例子，需要甲方IT和业务提前进行沟通。尽快提供好营销组织架构、角色清单、主数据相关字段&amp;审批、接口文档、关键表单信息和报表样式。 最好准备一份调研问卷（Base交付版本产品能力），让甲方先进行填写，如“考勤是否包含内勤人员的管理”、“内勤人员打卡，是否要基于定位进行检查，如距离办公楼100米内”。 反面例子呢，就是甲方项目组没有提前启动，会议室总是少个人。又或者，一个领域的业务，要调研多次，A业务线调研完成，再去调研B业务线。然后要自己进行整合和区分差异，再次开会讨论。更麻烦的是，同一领域业务，业务线内部无法达成一致，要请示大领导，整体调研进度会卡着。","categories":[{"name":"需求分析","slug":"需求分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/需求分析/"}],"tags":[{"name":"需求调研","slug":"需求调研","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/需求调研/"}]},{"title":"B端需求调研方法论","slug":"B端需求调研方法论","date":"2018-11-03T14:24:13.000Z","updated":"2019-11-07T03:19:55.249Z","comments":true,"path":"2018/11/03/b-duan-xu-qiu-diao-yan-fang-fa-lun/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/11/03/b-duan-xu-qiu-diao-yan-fang-fa-lun/","excerpt":"","text":"有段时间整个产品团队频繁支撑SFA项目，但需求调研普遍存在一些问题，导致PRD质量不高。团队成员基本是内部转岗过来的，对B端需求调研的方法论多有不足。故结合过往经验，参考《软件需求开发最佳实践-基于模型驱动的需求开发过程》一书，以车销业务为例做此分享。 调研前 调研中 需求开发 配合PPT阅读，体验更佳。","categories":[{"name":"需求分析","slug":"需求分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/需求分析/"}],"tags":[{"name":"需求调研","slug":"需求调研","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/需求调研/"}]},{"title":"小程序那些事","slug":"小程序那些事","date":"2018-09-25T15:05:10.000Z","updated":"2019-10-23T08:16:58.616Z","comments":true,"path":"2018/09/25/xiao-cheng-xu-na-xie-shi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/09/25/xiao-cheng-xu-na-xie-shi/","excerpt":"","text":"小程序的诞生、引爆、冷清、崛起都是微信去造势，再因势利导的结果。因此，我尝试站在巨人的肩膀上，带大家去体会其中的战略打法。希望从中吸取一些经验，帮助我们了解小程序的玩法： 前言造势借势用势知势任势 想要简单过一下的，下载PPT阅读。","categories":[{"name":"微信","slug":"微信","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/微信/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/小程序/"}]},{"title":"小程序那些事--任势","slug":"小程序那些事--任势","date":"2018-09-25T14:24:13.000Z","updated":"2019-10-17T04:40:57.977Z","comments":true,"path":"2018/09/25/xiao-cheng-xu-na-xie-shi-ren-shi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/09/25/xiao-cheng-xu-na-xie-shi-ren-shi/","excerpt":"","text":"《孙子兵法势篇》，知势、 造势然后任势。任势，就是创造和利用对自己有利的态势。下面我来给大家分享下，小程序从注册、设计、开发到测试、发布的一些注意事项。 注册先讲讲从0开始注册的流程，如下图所示： 如果已经有公众号，步骤就简单很多。公众号快速注册，填写邮箱密码，然后激活邮箱，最后点个确认就搞定了。： 设计前面讲到，微信的小程序势类似iOS的打法，整体的生态相对比较封闭。微信官方提供一份设计指南，希望保持整体交互的一致性。如果大家设计小程序的时候，希望知道小程序现有的控件，支持什么能力。在Web端其实可以进行查看，一部分控件UE，地址是https://weui.io/。 手机上回更全，包括地图、媒体之类这些能力。搜索小程序，名字叫做“小程序示例”，就可以体验了。 开发 开发这块我不是太熟悉，简单的给大家介绍一下。 首先让我感觉比较强大的是小程序开发的开发者工具，有以下特性： 可调试； 编译后可预览； 基本的代码编辑、智能提示； 项目管理； 创建、手机预览； 代码提交审核。 另外一方面，微信势支持WebSocket，小程序对于聊天和实时取数的场景，是能够覆盖的。 兼容 基础库和微信版本是一一对应的，兼容是针对基础库的兼容。如果不负责最低的基础库，在添加小程序的时候是会有提示的。 测试小程序没有测试包这个概念，只有“体验版” 简单分为五个步骤： 上传开发版代码：即在微信开发者工具中上传代码，这个动作要管理员扫描二维码授权； 发布体验版本：微信公众平台-小程序管理页面，可以从开发管理一栏中看到开发版中，以及提交的代码。提交审核旁边下拉按钮，选择“选为体验版本”，然后设置成功； 生成二维码：设置为体验者版本后，会生成一个二维码，可以用微信扫码体验。但这个码，不是随便谁都能使用的，体验者版本，是需要体验者才能使用的，这里应该是考虑保密的诉求； 添加体验者：管理员登录公众平台后台，并验证身份，然后根据微信号，添加体验者的微信； 扫码体验：使用微信，扫码进行体验（前提是微信的版本大于基础苦最低版本的限制）。 发布 小程序开发者发布新版小程序时，可根据自身需求选择“全量发布”或“分阶段发布”（不支持灰度）。 全量发布：即时向全量微信用户发布新版小程序。 分阶段发布：新版小程序将在15天内以开发者自定义的比例，向微信用户发布更新。 分阶段发布流程： 填写发布比例。发布后，将有该比例用户使用新版本小程序； 调整发布比例。根据线上使用情况，逐步提升发布比例。提升发布比例：开发者可根据线上使用情况，逐步提升发布比例； 开发者必须在15天内全量发布/撤销发布。如开发者在首次发布后15天内未撤销发布，平台将在第15天全量发布小程序新版本。 还有两个注意事项，希望大家记住： 小程序第一个版本必须选择“全量发布”模式发布； 开发者也可撤销分阶段发布，若撤销发布当前版本，所有用户将使用小程序上一个全量发布的线上版本。 版本好的，简单介绍了发布，现在讲一讲小程序的版本： 其实就这么几个关键词：全量发布、15天、撤销发布，一个最新包。 小程序不像APP，最终只会有一个最新版本（分阶段发布的那段时间会有两个版本共存）。 小程序第一个版本必须选择“全量发布”模式发布，若存在正在分阶段发布的小程序版本，不可发布新版本、不可回退已全量发布的线上版本； 当线上版本的上一个版本是分阶段发布并已撤销发布，那么当前线上版本不可回退。 开发者必须在15天内全量发布/撤销发布。如开发者在首次发布后15天内未撤销发布，平台将在第15天全量发布小程序新版本。 下图是我虚构的一个版本历程： 更新先介绍下小程序更新的约束： 小程序需要设置兼容的基础库版本，对应微信的版本； 可以选择无缝更新，但改动较大时，用户会感觉比较奇怪； 只能选择更新，无法选择不更新； 微信自动调用小程序的更新检测，自动下载，无法控制。 根据这个约束，我在设计小程序时候（登录才能使用），画了下面的这个流程图： 这里面微信最新，只是一个代表，其实就是检测基础库版本，过低就要求更新微信版本。 先讲一讲热启动和冷启动。假如用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时无需重新启动，只需将后台态的小程序切换到前台，这个过程就是热启动；冷启动指的是用户首次打开或小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动。 客服客服这块我也了解的不多，简单给大家分享下。这个是有赞的微商城的一个客服的UI。 总结一下特性： 客服的入口，是按钮，这是小程序提供的客服会话按钮。或者，使用普通的按钮，设置open-type=”contact” 亦可进入客服会话，这让我们可以更好的定制UI； 标准的客服会话按钮，提供了session-from参数，用于标记用户从哪个功能模块，哪个页面进入的客服； 小程序进入的时候，可以将当前小程序页面，发送小程序卡片给客服，更容易沟通，客服不用再根据名称去查找资料； 客服专属入口，可以开启推送消息。小程序客服消息页面（最右边的图），右上角按钮可以进入通知设置，默认“消息通知提醒”是开启的。开启后，当客服回复消息时，客户就能收到推送提醒。（微信的推送）。 客服后端：使用官方提供的网页版客服。 使用网页版客服工具前，小程序管理员需在小程序后台完成客服人员的绑定。目前小程序支持绑定不多于100个客服人员。 使用客服消息接口，将消息转发给自己的服务器，使用三方客服系统或者内部客服系统。 以下是小程序官网的客服消息发送限制（不可能再出现，客服追着你骂个不停了）： 好了，小程序的分享就到这里。","categories":[{"name":"微信","slug":"微信","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/微信/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/小程序/"}]},{"title":"小程序那些事--知势","slug":"小程序那些事--知势","date":"2018-09-24T15:24:47.000Z","updated":"2019-10-17T04:51:13.439Z","comments":true,"path":"2018/09/24/xiao-cheng-xu-na-xie-shi-zhi-shi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/09/24/xiao-cheng-xu-na-xie-shi-zhi-shi/","excerpt":"","text":"官方数据 保守估计，目前小程序已经2亿月活，小游戏功不可没。 广州全球财富全球论坛上，马化腾直接表示：“以后计算机的世界没有App，只有不断浮动的代码。” 虽然张小龙说暂时做不到微信OS这种，但是做一个可以运行小程序的程序是没问题的。实际上，在定义中，一个可以运行程序的程序，可以被称为是OS，例如Chrome OS。很明显，腾讯想要借助小程序建造一个完全由自己制定规则的应用生态，后知后觉的App开发者可能会面临淘汰。 优劣之外优势： 无需下载、体验度接近原生、背靠微信巨大流量、开发维护成本低、开发效率极高 劣势： 无法承载大应用、留存困难/没有留存的概念、入口过深、无法推送、传播困难（转发朋友圈等功能受限） 容易被小程序取代的： 工具型产品：计算器、万年历、天气工具等； 特定场景/线下服务领域 ：餐饮（如星巴克、肯德基）、零售/超市、医院、公交等； O2O领域：携程、美团外卖、饿了么、滴滴、摩拜、ofo、猫眼等。 发展里程由于官网那些很难找到历史更新日志，这部分都是来源于网络的数据，可能存在一定误差，望大家见谅。 首先看看这个长图，展示的是小程序诞生到17年7月份左右的这么一个历史。部分重大能力，图上有特殊标记。 然后是去年7月到今年年初的能力，更多的体现在小程序的入口、硬件能力上： 支持能力 基于前面讲的发展历史，简单总结一下小程序的能力。 首先是最基础的，入口能力，这里列出来的都是主要的入口类型，细分下去，可以有超过30个入口。 然后是支持的能力，这块在上一年，做了很多的更新，开放了更多的能力： 本地缓存，看了下官方数据，最大10M且微信用户间是隔离的； 三方插件，已有地图类型的，所以加入腾讯地图做导航也是毫无问题的； 8代码包，意思是初始的包最大4M，后续可以分包加载，所有包加起来最大能到8M； 10级目录，意味着最多能10级，再多，页面间返回跳转就要乱掉，要自行处理； 小程序打开小程序是指同一个公众号下关联的10个同主体小程序和3个非同主体小程序之间，可以调用接口直接相互跳转。 今年 7 月，微信小程序开放了社交立减金功能，当用户在小程序支付成功后，就会自动生成小程序立减金，用户通过邀请好友进行领取，用户领取后在下次微信支付时候就能够进行兑换，除了能获取到更多新用户之外，也能激励用户的二次购买。 连接万物 基于微信“寻粘性、联万物、造OS”的方向，也正是我们所可能借到的势能。 例如，我们的数据分析可以依托阿拉丁，而不用自己重新去订制。 核心入口 小程序在整个微信生态中，占据了核心地位，几乎可以和其他所有的能力互通（朋友圈只能截图分享）。 可以看出，分享、发现、公众号、扫码以及搜索是主要的入口： 对于初创公司而言，小程序便是基于微信流量的新的流量载体，并且基于微信高活跃、高打开次数的现状下与微信形成互利共生关系；而对于传统移动互联网产品，则多了一个可从小程序获取流量的机会。意味着变现，会有新的可能。 对于小程序这样的场景，获取流量的思路将与以往App导量是有很明显的区隔。h5调起App、导下载等等，在这里是玩不转的，更应该以服务直接切入，将其当做一个“OS”平台而非流量池，进而去完成商业上的闭环，而非将产品服务局限在App或是PC。 青出于蓝2016年12月28日，张小龙在微信公开课上分享了一张照片，照片上写着“应用号，2016年1月9日”，底下还有三个字：“启动日”。 IM-&gt;浏览器（公众号）-&gt;类OS（小程序），嘴硬的张小龙，说是可以运行程序的程序。理论上iOS不限制，就是微信OS，Android是碎片化无法限制的。 不再纠结于怎么样扩充公众号，去把它变成有更强大功能的公众号，而是完全可以跳开公众号，去做一种新的应用形态。 在微信里，未来的产品中，公众号的粉丝或是你的用户数量，小程序访问量或是你产品日活，完善的交易路径或是你商业闭环。 绑定小程序、内容分发小程序、关联小程序模板消息等等用来助力小程序用户存留、粘度及用户价值；而小程序支付可关注公众号、可嵌入h5页面等等又用来反哺公众号用户量增长。 突破–推送消息通知是一个很重要的功能，如QQ空间的回复状态通知，QQ邮箱的邮件通知，微信支付成功提通知等。这种常规的服务跟踪类消息，便于用户掌握产品对自身服务的进度，方便客户获取必要的信息，提高效率；保证用户的知情权，让用户有安全感。同时，对于产品本身来说，可以引导用户进行下一步行为，增加了产品的曝光率，便于用户留存，增强用户粘性。 但是，偏偏这个消息和APP消息推送不一样，不能多发。现有的限制： 通过 1 次支付，小程序可以向该用户下发 3 条模板消息。 通过提交表单来下发模板消息的方式，限制在 7 天内可以向用户推送三条模板消息。 但是，在某些业务场景下，的确需要主动的向用户推送消息（如电商类型的，你加入购物车的商品降价了；CRM类型的，打卡提醒），这块需要我们去做一个突破。 简单来说就是记录用户点击按钮时候的推送码，存储起来，每次下发推送的时候从此处获取。","categories":[{"name":"微信","slug":"微信","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/微信/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/小程序/"}]},{"title":"小程序那些事--用势","slug":"小程序那些事--用势","date":"2018-09-23T14:55:29.000Z","updated":"2019-10-17T04:30:27.750Z","comments":true,"path":"2018/09/23/xiao-cheng-xu-na-xie-shi-yong-shi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/09/23/xiao-cheng-xu-na-xie-shi-yong-shi/","excerpt":"","text":"杜蕾斯不只是善于借势，借着节日在微博上宣传自己，更是善于用势。17年感恩节，杜蕾斯自己感恩了一波品牌，扩大了战果。一方面是@品牌的留言评论，另一方面部分没被点名的品牌也不请自来，人为制造了一波“ 高潮 ”。 小程序这些小程序的玩法都充分利用了微信的社交属性进行裂变传播，成为小程序运营者们值得参考的范例： 幸福西饼 「幸福西饼」本身是互联网蛋糕品牌，在 110 多个城市拥有超过 300 个卫星工厂，但没有门店直接面对用户，也就是说，无法从线下获取自然流量。 「幸福西饼」基于地理位置开发小程序，在几乎每一个卫星工厂都登记了位置信息，所有工厂附近的用户都能在“附近小程序”里看到「幸福西饼」。「幸福西饼」介绍说，在小程序新增用户中，有20%是通过附近小程序得来的。基于这种获客的红利，获客成本目前也比较低。 西瓜足迹 西瓜足迹的玩法十分简单，也十分复杂。简单的是，用户只需要自己选择自己去过的城市，生成一张海报发往朋友圈就完成整个体验。复杂的是大家都劳心费神的选100个城市，就为了发朋友圈“炫耀”自己去过的地方。 而“西瓜足迹”小程序给了用户这种优越感，让用户热衷“炫耀”。觉得发完这张图，我能再次完善“朋友圈人设”。对此，戴宏民也这么认为： 点亮的地图让用户一目了然能看到自己的「足迹」，有数字作为参照让用户可以与好友进行对比互动，也许这是用户分享的原因。 顺带一提，西瓜足迹涉嫌抄袭，像素级模仿脚步地图。。。 蘑菇街 蘑菇街的小程序通过团购、直播、立减金等形式将人、货、场三个因素充分连接，让购买转化率达到App的2倍； 拼多多 拼多多社交电商在小程序上的飞速裂变，主要还是体现在分享传播和拼团砍价的精细运营的策略上。此外，拼多多小程序上的各种免费拼团、领红包等活动大大刺激了用户日常的活跃度。 小游戏 小游戏其实很多爆款，这里拿跳一跳和最强弹一弹两个典型的说一下。 我们先来分析一下跳一跳火爆的原因，总结为天时地利人和： 天时 就是发布的时间恰当。全民游戏的大天时，加上岁末年初，大家空闲时间比较充足，可以来一个游戏kill time的小天时； 地利 依托于微信这个平台，天然吸精。且微信为“跳一跳”提供了两个关键点：流量池和社交链； 流量池，也就是流量的来源，朋友圈啊，小程序码啊，分享给群或者为微信好友啊，入口太多了。加上官方的背书，10亿月活，随便转换点，都是千万用户。 社交链，也就是来自社交的正反馈。原来的游戏反馈机制是积分，现在的反馈还包括和朋友之间的攀比，一个是物质因素，一个是精神满足，都很重要。 人和 主要简单、攀比和逃离三个。 现在的人们都是快节奏，技术的发达，信息的泛滥，让人们变得懒惰，变得崇尚简单。根据按压力度不同，往前跳的距离不同，玩法就很简单，上手难度极低。 “社交+游戏”利用的就是人内心深处的攀比心理，人喜欢攀比，尤其是喜欢与自己熟悉的人攀比。当社交遇到游戏，你落后，你超越，都会唤起你内心深处的攀比心理。这种攀比，无形中会给你带来一种“社交焦虑症”，给你带来社交压力，促使你行动，跳得更好。 人喜欢YY，喜欢逃离，这是人们喜欢沉浸在虚拟世界中的原因。可以手指点点点，就不去想工作啊，生活上的一些事情，也是游戏吸引人的一部分原因。 最强弹一弹，也是可以归纳到天时地利人和上面。 天时，五一发布，人们刚好闲下来。至于地利和人和，大部分小游戏都是比较一致的。最强跳一跳出名的地方就在于，它复活是要分享的。这种诱导分享机制，简直就是群聊杀手，发的人多了，容易毁掉一个群聊。","categories":[{"name":"微信","slug":"微信","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/微信/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/小程序/"}]},{"title":"小程序那些事--造势","slug":"小程序那些事--造势","date":"2018-09-21T13:45:37.000Z","updated":"2019-10-17T04:44:56.153Z","comments":true,"path":"2018/09/21/xiao-cheng-xu-na-xie-shi-zao-shi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/09/21/xiao-cheng-xu-na-xie-shi-zao-shi/","excerpt":"","text":"看看微信通过怎样的产品和市场策略，让小程序火爆起来，一步步达到2亿月活。 涅槃 图 小程序的百度指数 2017 年初，微信正式开放小程序，全行业都将其视作一个新的流量红利风口，各公司纷纷迅速响应开发及上架自己的小程序。然而，观察一段时间后，除了昙花一现的几个现象级小程序外，绝大多数小程序并不能持续地获取到客观的流量。于是，对于小程序的质疑开始纷至沓来。 对于这点，微信内部很清楚，肯定是要想办法挽回局面的。微信通过近百次的迭代，开放更多的能力，更好的赋能三方，又让小程序火爆起来。 我们来回顾下，期间微信的操作，学习一下这种技巧。我个人认为，这些技巧在推广企业微信（这个可能是2B的下一个热点）的时候，其实也用到了。 打造典型那么第一步，就是这个打造典型。没有诱饵，鬼精鬼精的三方品牌肯定是不会轻易进场的。 好，我们看看这步骤里面，微信的招数： 17年，小程序发布初期，微信一直对普通商家限制小程序能力的开放，基本封闭了线上流量入口，却对某些特别的小程序青睐有加： 1月，关键词搜索入口只开放给京东、美团、滴滴等； 2月，微信官方为摩拜单车小程序量身定制“扫一扫”功能。扫描单车上的二维码，直接进入摩拜的小程序，使用摩拜单车。 3月，App分享，可打开小程序页面的能力率先开放给微信腾讯视频、QQ阅读。这些小程序的主体，要么是腾讯大力投资的品牌企业，要么是自家的腾讯系产品。 这些动作在保证小程序个别能力有充分测试时间的同时，又让普通商家看到小程序在微信生态中的重要性。 可以看到，微信选择了自己的亲儿子、干儿子，去做试点。一方面，自己参股的公司，体现资源倾斜，率先享受流量红利。另一方面，知根知底，协作也很简单。 扶持三方 好了，微信这一搅和，死水变活水，品牌商有点心动，想去试试小程序了。但小程序这全新的东西，公司里面没人会，开发起来估计很慢，这怎么办。针对这个问题，微信开放了第三方平台代为开发、维护小程序的能力。 微信在4月时开放第三方平台支持小程序的能力，开始鼓励商家寻找第三方服务商开发小程序。 小程序授权后，第三方平台的能力如下： 配置服务器地址 代码开发、上传、提交与发布 模版消息、客服消息 微信登录 7月时，又对第三方平台的模板消息管理接口和数据分析能力进行升级优化，给第三方更多发挥空间。 这种大力扶持第三方平台的行为，一如当年公众号和微信支付刚推出时的情景。 其实腾讯这几年玩法已经不一样了，不会自己费尽力气打开市场，而是让有共同利益方向的第三方服务商一起助推自己的产品项目。一方面，在某些领域，微信的确就不熟悉，做出来的东西很难落地。另一方面，拉拢一个盟友，就是减少一个敌人，自己投入的资源也好，还能赚个名声，给其他人留个盼头。这招数，很多地方都能用到，值得学习。 树立标杆通过三方平台，让小程序有一定的使用了。但是和原有的小程序一样，反向平平怎么办。这方面微信比品牌商还急，立刻联合了几个大牌，详细讲解小程序的能力，打造了一套玩法。 2017年2月，星巴克宣布与腾讯微信联袂打造“用星说”正式推出，上线仅三个月，便获得几百万用户。卡券、礼品卡等，其实是微信自2015年O2O异常火爆时，就积累下的能力。 17年的微信公开课，几乎全是小程序的专场，主要集中在深圳、北京、上海、成都等重点城市，并且邀请了星巴克、麦当劳、蘑菇街等知名品牌的小程序团队现身说法，分享成功案例。 在腾讯内部，小程序的地位也很突出，17年做了以下动作： 9月时马化腾亲自上阵为乘车码小程序宣传。 11月时腾讯全球合作伙伴大会公布小程序多项关键数据，大有让小程序和公众号地位比肩之意。 拉通线下前面三步走完，已经将大牌厂商纳入囊中。但是这远远不是小程序想要的，小程序一定程度上，承担了微信流量变现，以及争取更多流量的诉求。 这年头，哪里流量最多，哪里变现简单，答案很明确——线下。 小程序快速的做了以下动作： 开放快速创建门店小程序功能和小程序码，吸引线下商家入驻； 公众号关联小程序能力全面开放，让公众号运营者重视小程序的各种玩法； 开放“附近的小程序”功能，为线下商家引流； 针对“附近的小程序”的LBS推广，引入竞价排名的入口搜索机制； 开放快速创建微信小店小程序的功能，吸引电商商家入驻。 不同领域的小商家，就这样被慢慢地被推入其中，成为小程序市场的主体部分。 在腾讯的层层推进下，小程序有条不紊地在将近一年的时间里，终于星火燎原，构建了繁荣的市场生态。","categories":[{"name":"微信","slug":"微信","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/微信/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/小程序/"}]},{"title":"小程序那些事--借势","slug":"小程序那些事--借势","date":"2018-09-20T15:25:00.000Z","updated":"2019-10-17T04:34:47.245Z","comments":true,"path":"2018/09/20/xiao-cheng-xu-na-xie-shi-jie-shi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/09/20/xiao-cheng-xu-na-xie-shi-jie-shi/","excerpt":"","text":"小程序通过一年的迭代，赋能了普通的商家，让他们能结合公众号，做好会员营销。介于自行开发小程序，对技术实力要求较高，大部分企业选择了第三方开发平台。又是一轮淘金热，历史总是惊人的相似，最终获利的更多还是工具提供方。我们来看看，个个领域已有的杰出公司。 2C小程序工具运营商，代表公司：给赞、递名片、有车以后； 小程序独立电商，代表公司：Vogue、于小戈； 小程序电商平台，代表公司：蘑菇街、拼多多、罗辑思维。 目前小程序运营商主要通过已经积累了一定用户量的App或者公众号获取首批用户，但很快更多针对小程序本身特性的玩法被挖掘出来。 轻芒杂志的小程序通过“一起读”社区和漂流瓶等使用场景，给用户带来比公众号更好的社交阅读体验。 2B小程序第三方开发服务商，代表公司：即速应用； 小程序电商服务平台，代表公司：see小电铺； 小程序数据统计服务商，代表公司：阿拉丁。 以专业技术服务为基础的第三方服务商们的入场，在一定程度上填补了小程序初期发展阶段在开发和运营服务上的缺口。 2G对公业务，都是小程序自己去谈。 微信目前执行大出行&amp;电子政务战略，抢占城市、抢占高地。 滴滴打车和摩拜单车的全国最高日订单数都是 2000 万级别，这是移动支付在线上的超级阵地。在线下的交通市场，像合肥这样的中部省会城市，日公交客运量在 300 万。 可以说，多打通几个城市，占领线下交通移动支付场景，其战略意义同样重要。报税、粤省事这种类似的小程序，可能对微信的流量提升不多，但小程序和政府合作，是有可能实现连接一切的愿景的。","categories":[{"name":"微信","slug":"微信","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/微信/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/小程序/"}]},{"title":"小程序那些事--前言","slug":"小程序那些事--前言","date":"2018-09-18T12:25:00.000Z","updated":"2019-10-17T04:52:27.123Z","comments":true,"path":"2018/09/18/xiao-cheng-xu-na-xie-shi-qian-yan/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/09/18/xiao-cheng-xu-na-xie-shi-qian-yan/","excerpt":"","text":"前言部分，给大家讲述下，为何要分享小程序那些事。 小程序的定义首先来定义一下主语，也就是小程序。 小程序是一种无需下载安装即可使用的应用。它通常依托于某个平台级应用运行。广义来说，小程序不是特指某一个或者几个公司，只要符合以上定义的，都算是小程序。 各小程序的发布时间节点如下：1.13年，百度推出基于H5的轻应用，反响平平。2.16年，微信小程序开放内测。3.17年，微信小程序正式发布，半年后支付宝小程序公测。4.18年，手机厂商联合推出快应用，百度、支付宝先后发布小程序。 这其中有个异类，是快应用。个人理解是BAT进场后小程序后，手机厂商流量分发入口优势不再，所以做快应用制衡。 这么多类型小程序，我个人认为将会是百度和微信的战争。支付宝本身的交易属性，限制了它的流量来源。 微信走闭源，要根据标准开发，一定程序上，小程序依托于微信社交导流，但一定程度上又会伤害社交的体验。百度开源，走开放路线，联合众多APP（自己旗下好几款），其他平台的拿过来改改就能用。另一方面，主推AI的能力，对小程序赋能。个人理解，百度是想重现Android逆袭iOS的打法。 最后强调下，此次分享的小程序，都是特指微信小程序。 核心观点小程序那些“事”，为何要去讲这些事。这种事，不是鸡毛蒜皮的小事啊。从小程序的孵化、公测、正式发布，到小游戏的爆发，这些都是互联网的热点，绝对的大事。 从这些大事里面，我们可以看到移动互联网的大势。微信10亿月活，现在开放了流量的入口，赋能小程序。拼多多、足迹地图、跳一跳，这些火爆的小程序，都成功的设计产品，一波吸引了流量。 我个人认为，拥抱小程序绝对是大势所趋。 再从大势上面，可以简单做个结论：小程序绝对是近期的热点，是一个值得尝试的方向。产品一定要在规划上，大胆去试错。要赶紧进场，去瓜分这波流量红利。小程序，绝对比自己开发一个APP，试错成本低。 行业态势 以下是某个研究报告中的数据： 1998年至今，我国互联网发展经历了PC互联网和移动互联网两个阶段。 2008年以前的十年称为PC互联网，网民上网终端以PC机为主；经过十年的发展，我国互联网逐步由PC时代向移动互联网时代演进，CNNIC数据显示，2009年国内手机网民数量首次超过网民总数的50%（占比60.8%）。 截至2017年12月，我国手机网民规模达7.53亿，约占网民总数的97.5%，成为国内互联网用户的绝对主力。而腾讯2017年Q4季度财报数据显示，微信及WeChat合并月活跃账户为9.89亿。 据此可以推测，微信已覆盖大部分移动互联网用户，成为我国网民手机中的标配。 不禁感慨下，2G时代的QQ，4G时代的微信，腾讯社交巨头之名，从未旁落。国民社交软件才有这可怕的覆盖率，微信时代成为可能。小学生、中青年乃至60多的农村老人，拿着微信在用语音发消息，微信的用户教育已经完成了。 APP情况市面上绝大多数的产品，其移动端的形态都是以APP+内嵌H5为主。 前面讲了微信的月活，现在来看看APP的情况： 上面是极光的数据，还算稳定整体算是稳中有升。大家安装的APP还是增加的，12月等于人均多装了个。 再来看下载数据，简单得出个结论：去年至今，APP下载基本上是0增长，乃至负增长的。也就说，大家APP数量就定死了那么多，下载体验意愿不强，除非新的巨头APP出现（大热点，如共享单车，直播撒币大战、抖音等） 另一方面，人均安装APP（仅Android数据），去年至今，居然是稳步下滑的。这就很可怕了，等于要拉新，吸引用户下载体验，还要想办法取代掉原有的APP，才能存活下来，但是用户基本上不怎么下载APP了。 超级APP先看看下面两个饼图的数据： 2017年12月，我国移动互联网月活跃设备数为10.85亿，当月微信月活跃用户数为9.89亿，占比91%。同时，相比于移动互联网单日人均上网时长236.8分钟，微信用户日均使用时长为65.5分钟，约占其28%。 今年4月各类爆款小游戏的病毒式传播，以及电商618借助小程序宣传，小程序的用户数在这段时间增长很客观。 随着微信用户数上涨到达瓶颈，接下来或许是腾讯对用户使用时长的争夺战。 2017年1月9日，微信小程序发布，仅经过一年的发展，小程序的累计用户达到3亿，月活跃用户即达到2亿，占微信活跃用户总数的五分之一。 用户习惯已成 小程序的用户基数已经比较大，并且用户习惯也养成了，从上面张图可以看出： 截至6月份，用户平均单词使用时长达13分钟，使用频次也比较密集。 小程序用户单词使用时长整体呈上升趋势；小游戏上线半年以来，平均打次使用时长接近13分钟。 小游戏成为抢占用户时间的利器，受小游戏影响，用户沉浸在小程序的时间明显增长。 小程序用户平均每天使用小程序频次在2次以上占比95%，中国14亿人，也就是7个人里面，就有0.95个，每天至少打开2次小程序，用户粘性很高。 长尾效应&amp;微信生态 小程序的出现让微信满足用户的长尾需求成为可能，真正让用户对于微信“欲罢不能”，小程序将进一步加强用户对于微信的黏性。 微信从最早的即时通讯/熟人社交，逐渐添加社交（朋友圈）、媒体（公众号）、陌生人社交（附近的人、摇一摇）、电商（购物/京东）、游戏、金融（微信钱包）、搜索引擎（搜一搜）、新闻聚合（看一看）等各项功能，但仍然只能覆盖头部需求。 所以，小程序的出现让微信满足用户的长尾需求成为可能，真正让用户对于微信“欲罢不能”。 这可能是对腾讯来说，或者对微信来说，小程序的更重要的一个使命——也就是通过体验更好的即用即走的服务，去更好地服务长尾需求，更好地满足线上线下的链接。 通过这两个图表可以看出，小程序起来了以后，对于整个微信的使用次数，使用时长以及微信支付的使用频次都有很显著的增加。 所以还是证明，在一些以前看似长尾的一些需求上，小程序对主产品有比较大的刺激作用。从这点上来说，小程序对于微信还是非常重要的一个产品。","categories":[{"name":"微信","slug":"微信","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/微信/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/小程序/"}]},{"title":"非功能性需求","slug":"非功能性需求","date":"2018-08-21T12:20:05.000Z","updated":"2020-03-16T09:09:31.770Z","comments":true,"path":"2018/08/21/fei-gong-neng-xing-xu-qiu/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2018/08/21/fei-gong-neng-xing-xu-qiu/","excerpt":"","text":"我们常说要加一个功能，或者扩展已有功能。有没有考虑过，功能之外的东西呢？今天给大家分享，非功能性需求。 定义我们总是关注功能上的需求，忽略非功能需求。 功能性需求功能性需求，指的是产品必须执行的动作，不是质量要求。且此类需求需要避免歧义，注意用词。 大体上可以分为： 产品需要哪些功能？ 这些功能是为解决哪些问题？ 功能与问题之间的追踪是什么样的？ 这些功能能够改变公司的业务问题吗？ 功能需求如何测试？如何验收？ 以自行车为例。自行车又叫单车， 通常是二轮的小型陆上车辆 。那么对应的功能性需求，我认为至少包含： 传动系统，能让人的踩踏变成轮子向前的动力 导向系统，能控制行驶的方向 制动系统，能进行减速、停止驾驶等 非功能性需求产品必须具备的属性，使产品可靠、易用，体验更好。注意不要写解决方案，消除技术成分。 一般包含： 产品需要什么样的质量标准？ 易使用性、易扩展性、性能是什么样的要求？ 如何度量？如何验收？ 产品有什么约束条件？ 还是以自行车为例，非功能性需求可以是： 使用时自减少颠簸。具体方案可以是用橡胶轮子取代木轮，也可以是增加避震缓冲器。 使用时候要省力。具体方案可以是减少传动系统动力损耗，也可以是增加变速器辅助爬坡，还可以是增加助力系统。 必要性很多时候，项目成员都说没时间，这样就能用了，不关注非功能需求。但是又老遇到各种问题，系统很不稳定。 常见问题 问题 所属类型 给客户现场演示，老是出现问题 性能需求 对比竞品，不好看 观感需求 XX功能，方案很NB。但是销售都不会用，产品内部也没几个人知道怎么用 易用性需求 APP请求了好多权限，客户要求给出说法。请求对应权限，是哪个功能要 安全性需求 后台采集定位，iOS上架难度大 法律需求 当然，现场演示这种，基本都会出问题。但不能否认，必须确保性能。网络正常，5秒转不出来一个页面，肯定是存在问题的。 行动计划描述 非功能性需求 描述 观感 预期的外观 易用性 基于预期用户的操作水平作出 操作 产品预期的操作环境 性能 多快、多大、多精确、多安全、多可靠等 可维护、可移植 产品的可改动性必须达到什么水平，例如增加一个功能 安全性 产品的安全性、保密性和完整性 文化与政策 人的因素 法律需求 满足适用的法律 以易用性为例子，讲一下怎么一步步消除技术成分： 产品将使用一个鼠标 产品将使用一种指点设备 产品将允许用户直接操作所有的界面元素 发现 是谁或是什么 它们或它是否有以下需求 用户 观感、易用性、安全性、文化/政策 操作环境 可操作性、性能、可维护性 顾客、客户 文化/政策 相邻系统 法律、可操作性、性能 以批量生成帐号为例，讲述下具体的发现过程： 制造商的IT部相关人员，为经销商生成帐号（功能诉求1，制造商管理经销商帐号） 该行业，全国类型大企业，一般以省为单位设置一级经销商，也就30多个一级经销商（目标行业大背景） 考虑到部分制造商是区域型企业，某企业经销商数量将近一千（特殊场景） 一般系统上线，采用分批上线策略（具体策略） 为了用户的便利性（相关需求，易用性需求），需要支持批量生成帐号，一次300条记录（性能需求） 最终的需求描述很简单：批量生成经销商帐号，需要支持一次300条记录 明确定位非功能性需求也不是一概而论，需要结合产品的策略和所在行业，进行清晰的定位。 举个例子，企业级的SaaS产品，面向消费品行业的销售人员，对应的非功能性需求评分如下（满分10分）： 非功能性需求 评分 观感 5 易用性 7 操作 6 性能 8 可维护、可移植 10 安全性 9 文化与政策 5 法律需求 8 假如是个金融相关的产品，法律需求肯定是10分的。以P2P为例，没有信用担保，始终就是存在法律风险的。即便有存管银行，银行只进行资金的监控，防止挪用，不进行信用担保。 解答迷津 现状 疑惑 方案 产品使用了APP，要做各系统版本的兼容 不知道市场上系统版本占有率 善用国内报告 APP端， 要做各机型的兼容 不清楚哪些机型受欢迎 BAT研究报告，国家互联网应急中心报告 产品有Web端，要做浏览器的兼容 大体知道有几款浏览器，但不清楚客户现有的浏览器主要是什么，也不知道各浏览器占比 BAT研究报告，国家互联网应急中心报告 销售使用笔记本演示系统，体验不好。要在大屏幕和小屏幕上，都保证基本的用户体验 l仅仅知道1080P，2K以及笔记本屏幕这种通用概念，不清楚有哪些分辨率，也不知道对应占比 BAT研究报告，国家互联网应急中心报告 目前没关注性能需求，补充起来挺麻烦 性能指标不清晰，每个都定义好麻烦 参照业内标准，设置统一规范。如Web端3秒响应，APP端1.5秒响应。数据较多的页面，可以通过进度条、懒加载等方式进行优化 要求产品简单易学，培训成本低 无法界定，什么是简单易学 一般是经过培训后，一定比例的用户，能在指定时间内，完成特定的任务 非功能性需求描述很困难 不知道这个非功能需求，是否可以实现，是否合理 和开发经理保持沟通，或询问有经验的产品同事 需求验证 方面 判断标准 功能性需求 确保功能被正确地执行 非功能性需求 量化度量，引入该产品的3个月之内，60%的用户将用它来完整规定的工作。在这些用户之中，将有75%对产品表示赞许。 举个例子： 描述：当未经培训的公众第一次尝试使用该产品的时候，它应该易于学习。 理由：潜在用户可能从未使用过这类产品。 验收标准：由业务人员组成的测试小组中，90%的人在第一次使用该产品的时候，能在45秒内成功地登录APP，进行考勤打卡。","categories":[{"name":"需求分析","slug":"需求分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/需求分析/"}],"tags":[{"name":"PRD","slug":"PRD","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/PRD/"}]},{"title":"REM图像识别市场分析","slug":"REM图像识别市场分析","date":"2017-06-10T14:20:29.000Z","updated":"2019-10-17T05:24:24.141Z","comments":true,"path":"2017/06/10/rem-tu-xiang-shi-bie-shi-chang-fen-xi/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2017/06/10/rem-tu-xiang-shi-bie-shi-chang-fen-xi/","excerpt":"","text":"当初AI概念还没炒起来，只有图像识别这个说法。部分场景根本不需要AI加持，现在的AI还是需要挤水分的。要快速阅读的，可以下载PPT。 此次仅介绍REM图像识别，后续分别从以下几个角度进行说明： 市场概述 业务应用 知名厂商 简单释义REM，全称Retail execution and monitoring，翻译过来就是零售执行和监控。这圈定了我们的范围，就是那些零售相关的商超，以及消费品的生产厂商（主要是快速消费品）。零售执行行业，以大消费行业里面的必须消费品居多，是非常优质的行业。一方面，国家拉动内需，释放消费政策扶持；另一方面行业虽然增速放缓，相关人力又在升高。虽然对成本控制很迫切，但是现金流很稳定。 图像识别是一种技术，可将商品展示，货架陈列和货架等在用智能手机在商店内拍摄的数字图像，转换为可用的信息和分析。为了解货架状况，通过上传的货架展示的图片，一系列分析和关键绩效指标会生成，将其与合同协议进行比较，推动可能增加收入和消费者满意度的销售行动。 REM图像识别，是针对零售执行的过程，采集图像，上传至云端。经过分析，返回相关的建议给销售代表。以及，在后台形成分析的报表数据的过程。","categories":[{"name":"AI","slug":"AI","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/AI/"}],"tags":[{"name":"图像识别","slug":"图像识别","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/图像识别/"},{"name":"市场分析","slug":"市场分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/市场分析/"}]},{"title":"REM图像识别市场分析--知名厂商","slug":"REM图像识别市场分析--知名厂商","date":"2017-06-07T14:52:03.000Z","updated":"2019-10-17T05:24:16.909Z","comments":true,"path":"2017/06/07/rem-tu-xiang-shi-bie-shi-chang-fen-xi-zhi-ming-han-shang/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2017/06/07/rem-tu-xiang-shi-bie-shi-chang-fen-xi-zhi-ming-han-shang/","excerpt":"","text":"Trax Technologies官网：http://www.traxretail.com/ 口号：在Trax，我们致力于为消费品公司提供更准确，一致和可靠的方式，使用我们领先的技术平台实时了解他们的产品在市场上的表现。 公司简介： Trax是全球零售图像识别的领导者。为世界45多个国家的一线制造商提供领先的技术和市场数据服务，我们可以实时更紧密的店内执行控制和整体竞争格局。 总部设在新加坡的亚太地区、欧洲、中东、北美和南美地区的办事处，可口可乐、AB InBev、喜力啤酒、雀巢和汉高等顶级品牌在全球范围内利用Trax来增加所有销售点的收入。 Trax图像识别领域的领导者，Trax继续推动技术界限，导致了多个行业第一： 对零售业实行实时照片识别分析。 将零售图像识别带到移动智能手机。 每月超过50万次访客量。 每月处理超过100万张图片。 将KPI报告提交给商店的销售人员。 开发Trax智能冷却器 – 一种免提的冷却器实时监控解决方案。 Trax零售执行是一种店内执行解决方案，可帮助消费品公司在现场获得全面的实时查看，了解所有零售渠道的店面和现场表现。 在购物的时候，通过正确的分类摆放和生动化陈列，引导购物者购买，同时确保现货充足对您的成功至关重要。 将您的零售执行策略推广执行，直到每个门店的最新SKU是非常困难的，尤其是昂贵的人工审核往往不能获得最佳回报。我们突破性的图像识别技术为商店中的纠正措施提供近实时的（报告在10-15分钟内交付）现场数据，并为主管和管理层的洞察力提供了一个平台，将您的手动的基于执行策略的审核转变为战略执行改进规则。 Trax 5P健康检查 – 优化店内商品和合规性： 业务价值： 差异优势： 细粒度识别算法是专门针对消费品市场而设计的。因此，可以在SKU级别识别任何产品，品牌或子品牌，达到96％的准确度，以实时提供可操作的见解。 Planorama官网：https://planorama.com/ 口号：配合门店内现实与您的期望。使用我们领先的零售业图像识别解决方案数字化店内测量。从简单的货架照片获取实时的行动洞察力。并确保货架现实始终符合您的成功之境。 公司简介：这一切都是随机的遭遇。2009年，当Vincent Jacques接手一家大型咨询公司Adrien Auclair时，他正在完成图像识别技术博士学位。他们两人在巴黎的校友联谊活动中相聚。 他们一起开始思考图像识别如何彻底改变公司和人们对环境的看法和影响。一个月后，Planorama成立，其使命是使快速消费品公司能够利用图像识别的力量来改善其零售业务。 为全球100多家制造商提供零售和销售服务，其中包括可口可乐、联合利华。 您的产品与购物者有约会，为什么让不能保证完美的零售执行，过时的手工商店检查成为阻碍呢？ 这是下一个帮助您面对最严苛的店内执行挑战的基础工具：Planocheck。通过我们的智能深度学习和图像识别，您现在可以从单个货架照片中提取实时可行的无偏见商业智能。让您的销售代表的生活更容易，即时报告在他们仍然在商店时采取行动。集中访问所有SKU，商店，连锁店和渠道的最新统一数据，从而做出更好更快的决策，并确保购物者与您的产品的店内体验是您为他们设计的。 产品特性： 更快，更锐利，更广泛，更稳定 技术保障： Lab4motion官网：http://lab4motion.com/ 口号：强大的分析、有用的知识、简单，自定义的工具 公司简介： Lab4motion是静态和视频图像识别技术的全球领导者之一。 Lab4motion为广泛的垂直行业的各种客户提供服务。Lab4motion成立于2011年，是2013年在波兰举办的IBM SmartCamp挑战赛的获奖者，可以利用Lab4motion的技术来衡量现场产品放置的合规性，并在货架前识别和理解客户行为。这使得CPG公司和零售商可以更好地了解转换和销售业务决策的总体原因和影响。 核心特点： 产品识别： 通过图像处理技术识别95％的准确率的产品。自学习算法识别所有类型的SKU，并自动拼接，允许一次性捕获和分析多张照片展示。该解决方案由市场研究公司，CPG和分销商的销售团队以及销售点的所有者用于评估和分析展示。通过产品识别和客户行为分析的结合，销售和分销周期的所有玩家可以分析和了解产品布局对客户行为的影响。 下面我们只提供一些可从上述指标获得的一小部分利益： 确定产品与客户的空间份额。 消除偏差，客观性和误差，评估产品存在及其在货架上的正确面对。 关于平面图合规性的实时信息和反馈（综合）。 产品放置，面对新包装对客户行为的影响（客户注意到您的产品）。 实时提醒： 这可能是我们解决方案中最重要的功能，计算机功能可以分析和解释接收的信息，并通过任何通信方式（如电子邮件或短信）实时推送提醒，根据适当的员工级别。 这意味着：不仅在出现关键时刻，而且发现事件发生时，会收到关于发生事件的通知，这意味着可以进行恰当的反应来解决具体的事件。从改善客户服务，识别低质量员工，或评估营销/沟通活动的效果 – 实时警报可以为参与过程的所有各方提供有价值的反馈。 如： CEO有兴趣获得有关特定缺货情况的信息。 营销总监有兴趣收到有关新POSM效果的反馈意见。 产品负责人有兴趣评估在人体模特上展示新系列的效果。 人力资源部主管有兴趣追踪新员工的表现。 POS经理有兴趣推销。 Simbe Robotics官网：http://www.simberobotics.com/ 口号：世界首个完全自主货架审查和分析解决方案。 公司简介： Simbe Robotics为零售业建立自动化解决方案， Simbe由领先的硬件投资商Lemnos Labs和SOSV支持。曾经发布过一个很惊艳的视频，地址是：https://v.qq.com/x/page/l0531ltm7ac.html。 Simbe Robotics，推出专门追踪货架上物品的机器人 Tally，能够在30至40分钟内扫描完一家超市的所有货架，每小时平均能够获取1万5千至2万笔产品资讯；对一般员工而言，可能得花上20至30小时。 Tally的体重约13.6公斤，身高约96厘米，不过用户可以根据需要来调节身高。据介绍，常规超市来说，Tally巡逻一圈大概需要1小时，而当电能不足的时候，它还会自己返回到充电底座的。 值得一提的是，制造商Simbe Robotics表示：由于具有避障技术，所以无需担心Tally会撞到客人等问题。 Tally可以通过避障探测而在超市来四处扫描，然后利用自身的传感器将捕捉到的数据进行分析。完成数据处理的步骤后，Tally会根据云端处理来向用户反馈扫描报告和建议，比如：哪些商品需要补充上架？哪些商品定价错误或者位置放置不正确？ 除此之外，根据云端已有数据：Tally还能计算出库存，给超市提供补货建议，如“货架6缺少3瓶饮料罐、货架 7 的书栏位放错、货架10标错价钱。” 在 Tally 正式自己工作时，得先由店里人员带着它走一圈，知道这个空间的行走路线，而它也有设置感应器，防止撞上顾客或货架。此外，虽然机身只有100公分高，它的可视范围可达约243公分高，不怕漏掉高处货架商品。 机器人被零售商所接受，急于以新的方式加入科技潮流。Tally由三家财富500强企业和两家消费品公司进行测试，它也引起了150多个全球零售商的兴趣。首席执行官兼联合创始人布拉德·博戈雷（Brad Bogolele）表示，机器人已经超出了部分客户的试用阶段，但是Simbe Robotics公司并不能自由披露这些客户的名字。 基于Simbe迄今为止的现场测试工作，当使用计算机视觉拍摄商店货架上的物品，并将其与商店应该位于何处以及位置的商店图进行比较时，Tally的准确度高达96％。报告货架上的内容与实际情况之间的差异报告给Simbe的后端软件程序，加载到云中并与零售商共享。 博古莱说：人类工作者的准确率约为65％，而该工作人员需要25小时才能完成库存盘点，而Simbe只需要30分钟。 合合信息官网：https://www.ccint.com/ 简介：上海合合信息科技发展有限公司(CCi)成立于2006年，主攻人工智能技术和智能移动办公以及各类证照识别。在光学字符识别、手写识别、图像处理及自动图像增强等领域深耕多年，拥有自主知识产权的核心技术，研发创造全球300多项专利，为近百家世界500强企业提供技术支持。 合合信息旗下拥有商务Ｃ端产品：名片全能王（CamCard）、扫描全能王（CamScanner）、启信宝，并在全球累计有超过5亿的用户。 名片识别能力： 扫描识别名片信息，自动判断名片语言的种类。 精准找到名片边缘，切除多余背景，矫正倾斜的名片，专业美化图片质量，名片的扫描图像更清晰。 按照系统要求，将名片识别结果自动返回。","categories":[{"name":"AI","slug":"AI","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/AI/"}],"tags":[{"name":"图像识别","slug":"图像识别","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/图像识别/"},{"name":"市场分析","slug":"市场分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/市场分析/"}]},{"title":"REM图像识别市场分析--业务应用类型","slug":"REM图像识别市场分析--业务应用类型","date":"2017-06-06T13:52:03.000Z","updated":"2019-10-17T05:24:08.408Z","comments":true,"path":"2017/06/06/rem-tu-xiang-shi-bie-shi-chang-fen-xi-ye-wu-ying-yong-lei-xing/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2017/06/06/rem-tu-xiang-shi-bie-shi-chang-fen-xi-ye-wu-ying-yong-lei-xing/","excerpt":"","text":"货架商品识别货架商品识别是指：通过对利用计算机对货架商品图像进行处理、分析和理解，得到区域分割后，基础信息、位置信息和分析信息。 基础信息包括：商品名称、型号、数目等。 位置信息包括：货架总层次、商品在货架的位置、商品类别在货架的位置。 分析信息包括：商品货架占有率，商品是否需要补货，商品在货架上的排列顺序。 业务员进行产品铺货的时候，需要填写SKU的货架数量。SKU多，而且需要手动点数量，效率很低。业务员希望通过拍照，自动识别出货架上属于厂家的SKU的货架数量。 物料识别物料识别是指：通过对利用计算机对POEM（如吊旗、跳跳卡、地贴）图像进行处理、分析和理解，得到区域分割后，基础信息、位置信息和分析信息。 基础信息包括：物料名称、类型、数目等。 位置信息包括：物料在商场的位置和货架的相对位置。 分析信息包括：该商场是否按规定配齐了物料，物料有无破损等。 现有的促销物料，针对不同的地区，不同等级的终端，都是有不同的配备要求的。业务人员只需要拍照，就可识别出该终端的物料，并判定是否符合要求。 陈列方式识别陈列方式识别是指：通过对利用计算机对货架商品图像进行处理、分析和理解，根据陈列的标准和生动化陈列的模型，得到陈列是否符合标准，以及陈列改善的建议。 业务员需要对产品进行生动化成列，以促进产品销售。业务员完成陈列后，需要拍照上传，但无法知道是否生动化陈列。业务员希望拍照立即检测是否生动化成列，如：堆头是否拜访整齐？货架是否生动化陈列？ OCR定义： OCR （Optical Character Recognition，光学字符识别）是指：电子设备（例如扫描仪或数码相机）检查纸上打印的字符，通过检测暗、亮的模式确定其形状，然后用字符识别方法将形状翻译成计算机文字的过程——即，针对印刷体字符，采用光学的方式将纸质文档中的文字转换成为黑白点阵的图像文件，并通过识别软件将图像中的文字转换成文本格式，供文字处理软件进一步编辑加工的技术。 如何除错或利用辅助信息提高识别正确率，是OCR最重要的课题，ICR（Intelligent Character Recognition）的名词也因此而产生。 衡量一个OCR系统性能好坏的主要指标有：拒识率、误识率、识别速度、用户界面的友好性，产品的稳定性，易用性及可行性等。 业务员新发掘一个小超市，需要手机端点开新增终端页面，填写超市名称、负责人、电话、传真等信息。这需要业务员一个个询问店老板，手工录入，非常繁琐。一般店老板有个人名片，业务员希望能自动读取名片上的相关信息，自动新增或者更新信息。","categories":[{"name":"AI","slug":"AI","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/AI/"}],"tags":[{"name":"图像识别","slug":"图像识别","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/图像识别/"},{"name":"市场分析","slug":"市场分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/市场分析/"}]},{"title":"REM图像识别市场分析--市场概述","slug":"REM图像识别市场分析--市场概述","date":"2017-06-05T12:52:03.000Z","updated":"2019-10-17T05:24:13.451Z","comments":true,"path":"2017/06/05/rem-tu-xiang-shi-bie-shi-chang-fen-xi-shi-chang-gai-shu/","link":"","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/2017/06/05/rem-tu-xiang-shi-bie-shi-chang-fen-xi-shi-chang-gai-shu/","excerpt":"","text":"技术趋势2016年消费品炒作周期： 图像识别需要5-10年才能完整商业化，目前处于第二阶段。 在这种过度的预测和不切实际的预测阶段，技术领导者的广泛宣传活动取得了一些成功，但随着技术的进入，技术面临更多的失败。 唯一赚钱的企业是会议组织者和杂志出版社。 市场特征根据《中国零售行业发展报告》的数据显示：16年商品零售额增速继续稳步放缓，保持了10.4%的增长。但是企业零售额增速不及预期，还是继续下跌。 2016 年，国家出台一系列降成本举措，零售企业成本水平总体平稳，商品采购成本、三项费用增速低于同期销售额，人工成本上涨较快，增速高于同期销售额。 据商务部典型零售企业统计数据测算，2016 年零售业限额以上大中型法人企业，商品采购成本为 77980 亿元，比上年增长2%，增速比企业销售额低 0.7 个百分点；营业费用、管理费用、财务费用合计为 8400 亿元，比上年增长 1.8%，增速比企业销售额低 0.9 个百分点；工资总额为 2870 亿元，比上年增长 4%，增速比企业销售额高 1.3 个百分点。 另外，根据市场调研，营销部门人数上千的快消品厂商，基本上都有助理角色，专门负责审核图片。部分快消企业，此类角色的人数，一度达到30人，且只能抽查图片。 一般情况下，费用套取的比例至少有10%。因为费用举证，图片是主要的证据。但图片只能抽查，费用被套取风险很高。 市场机会 节省成本： 削减第三方审核费用。 削减第三方样本市场数据成本（例如SOS和价格检查数据提供商） 优化零售执行： 获得一个无偏见无错误的视图，了解店内真正发生的情况。 加快识别增长机会和绩效差距。 跟踪销售团队和销售商实时表现。 更好的工作条件和更严厉的道德监督，提高销售代表生产力。 解锁新的增长机会： 将店内时间的重点放在增长活动上。 在销售点启用实时操作。 根据合规差距，开展更多的KPI活动。 通过每个商店，每个渠道，每个SKU的数据拓展您的视野。 使零售更容易： 授权您的团队（终端客户，现场执行团队）进行数据驱动的论证，促进与零售商的合作。 分析得到准备使用的缺货（需要补货）的SKU列表，以促成商店下订单。 改善零售商业绩监测。 加速数字转型： 对零售执行过程进一步数字化。 在执行流程中嵌入最先进和最有潜力的技术，解锁未来的机会。 市场趋势零售执行和监控（REM）由制造商或其渠道合作伙伴在商店层面执行的活动组成。这涵盖了各种各样的活动，专注于尽可能多地销售制造商的产品。这些活动的例子包括采购产品订单，补充货架，执行促销展示，记录货架状况和竞争活动，并与零售店管理者沟通。 主流的解决方案，针对图像识别提供了下图所示的功能。 图像识别通过识别颜色，包装尺寸和标签设计，以及通过将这些属性与其参考数据仓库映射来分析捕获的数字图像。 这个能力是比较基础的，已经实现。正在慢慢开发关键功能，将其嵌入生产质量应用程序，并集成数字商品应用程序和零售执行监控解决方案。这将使制造商和零售商更好地了解缺货，新产品分销，货架状况或陈列合规。它还将产生有用的零售指标，以更好地了解销售。 市场壁垒 试验表明：由于产品类别的不同，识别准确率在8486和9699间浮动。一般95％以上的准确度才会商用，因此需要额外的技术进步才能广泛使用。 识别返回结果所需的时间是一个问题，通常需要三到四分钟的时间才能返回结果，可能抵消了免除人工盘点和录入的生产力。 解决方案的成本（从1元到4元）仍然是一个障碍，需要有形的经济利益，例如：进行试点计划，证明可以增加销售和销售队伍的生产力。 国内中小零售商，在中小终端，条件有限（如灯光不足等），且零售执行并没有统一的严格的规范。因此，很难保证图片的质量，使用图像识别比较困难。如果是消费品厂商，一部分尚未信息化拜访业务。就算信息化了，对庞大一线人员的教育不足，未有明确的规章制度，导致图片质量很差。 市场紧迫性本次根据Garner的数据，列举了十九个成熟或新兴零售执行解决方案的供应商。其中九个是全球或多个地区的，九个主要在一个地区（一个供应商没有透露此信息）。但是，其中一些“一个地区”的供应商已经在其他地区建立了一些部署，其中许多都有扩张的资源和野心。 我们预计：随着许多地区性企业的持续扩张将继续发生。我们预料更多的制造商寻求全球覆盖能力，正如寻求巩固他们监督的供应商。 密切注意：这些区域供应商通常具有广泛的功能和深厚的本地专业知识，这在某些情况下可能至关重要。 下图将这些供应商分解为全球/多地区与今天的主要区域，该图还提供了他们的总用户数和按地区分列的百分比。 注︰ Oracle 不披露 这些解决方案提供商，多数都有广泛的功能，并且大部分都有图像识别功能，或者规划加入图像识别功能。 如下图所示，只有5家没有图像识别的支持，图像识别是大势所趋：","categories":[{"name":"AI","slug":"AI","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/categories/AI/"}],"tags":[{"name":"图像识别","slug":"图像识别","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/图像识别/"},{"name":"市场分析","slug":"市场分析","permalink":"https://github.com/BakerHancockChen/BakerHancockChen.github.io/tags/市场分析/"}]}]}